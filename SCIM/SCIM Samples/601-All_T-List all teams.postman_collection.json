{
	"info": {
		"_postman_id": "ed35e8a5-05c0-4b96-ad8b-a97ff9e68d77",
		"name": "601-All_T-List all teams",
		"description": "Provided 'as is'\n================\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\nUser guide\n==========\n\nhttps://d.dam.sap.com/a/kv3cXuB\n\nBlog (for Q&A)\n==============\nhttps://blogs.sap.com/2021/05/28/sap-analytics-cloud-scim-api-best-practices-and-sample-scripts/\n\nAbout\n=====\n\nScript version 0.7.2\n\nSample scripts created by Matthew Shaw, SAP. <https://people.sap.com/matthew.shaw/#content:blogposts>",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9591952"
	},
	"item": [
		{
			"name": "READ teams page by page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"READ teams page by page\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401]);\r",
							"    }\r",
							");\r",
							"const NeedGetToBeAuthorised = pm.variables.get(\"NeedGetToBeAuthorised\");\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"if ( (pm.response.code === 200) || (pm.response.code === 404) )\r",
							"{\r",
							"        // we are authorised and the csrf-tokem is also valid. We need to set the x-csrf-token so the call is quicker.\r",
							"        // Performing a 'fetch' of the x-csrf-token makes the call longer and its unnecessary. Setting the x-csrf-token to a valid value\r",
							"        // will speed things up by a small fraction (which can be a lot of time if making thousands of calls!)\r",
							"        const csrftoken=pm.environment.get(\"x-csrf-token\");\r",
							"        if (csrftoken===\"fetch\")\r",
							"        {\r",
							"            pm.environment.set(\"x-csrf-token\",postman.getResponseHeader(\"x-csrf-token\"));\r",
							"        }\r",
							"};\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken or the csrf-token must be invalid. We shall get new ones of each!\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new access token');\r",
							"        postman.setNextRequest(\"GET accesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"        break;\r",
							"    }\r",
							"    case 200:\r",
							"    {\r",
							"\r",
							"        if (NeedGetToBeAuthorised)\r",
							"        {\r",
							"            console.log(pm.info.requestName+' '+pm.info.eventName+': New session now authorised');\r",
							"            pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"            // errors must not be reset as the next call to UPDATE team must re-submit the request\r",
							"            postman.setNextRequest();\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"            pm.variables.set(\"ContinuousErrors\",0);\r",
							"\r",
							"            const readbody                          = JSON.parse(responseBody);\r",
							"            const StartTeamIndex                    = pm.variables.get(\"StartTeamIndex\");\r",
							"            let   ReadTeamsIndexSize                = pm.variables.get(\"ReadTeamsIndexSize\");          \r",
							"            const total_teams_in_this_SAC_service   = readbody.totalResults;\r",
							"            const teams_this_page                   = readbody.Resources.length;\r",
							"            let   max_index_size                    = pm.variables.get(\"MaxIndexSize\");\r",
							"\r",
							"            \r",
							"        \r",
							"            if (readbody.itemsPerPage<ReadTeamsIndexSize)\r",
							"            {  // we requested more teams than SAC provided and so SAC is limiting the number of teams we can read per page\r",
							"            // confusingly readbody.itemsPerPage will be 200, even when the number of teams returned could be just 5 (i.e. less than 200).\r",
							"            // this means this code will only be executed if we ask for more teams than we got back (even when the number of teams is less than what we asked for)\r",
							"                max_index_size = readbody.itemsPerPage;\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': Maximum index size set by SAP Anlaytics Cloud is '+max_index_size);\r",
							"                pm.variables.set(\"MaxIndexSize\",       max_index_size);\r",
							"                pm.variables.set(\"ReadTeamsIndexSize\", max_index_size); \r",
							"            };\r",
							"            const max_team_index_this_page = StartTeamIndex + teams_this_page -1;\r",
							"            const teams_per_second = Math.round((teams_this_page/(pm.response.responseTime/1000))*10)/10;\r",
							"            \r",
							"            // console.log(pm.info.requestName+' '+pm.info.eventName+': Analysing '+teams_this_page+' teams '+StartTeamIndex+' to '+max_team_index_this_page+' (throughput: '+teams_per_second+' teams/sec) of '+total_teams_in_this_SAC_service);\r",
							"        \r",
							"            readbody.Resources.forEach( myfunction_display_teamname );\r",
							"            function myfunction_display_teamname( team )\r",
							"            {\r",
							"                let number_of_team_roles = (team.roles === null) ? 0 : team.roles.length;\r",
							"                console.log(\r",
							"                'Team '\r",
							"                +team.id\r",
							"                +' has '\r",
							"                +team.members.length\r",
							"                +' users'\r",
							"                +' and is a member of '\r",
							"                +number_of_team_roles\r",
							"                +' roles'\r",
							"                );\r",
							"            }\r",
							"            \r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': found_team',found_team);\r",
							"            \r",
							"            if (max_team_index_this_page>=total_teams_in_this_SAC_service)\r",
							"            {\r",
							"                // we have read all the teams so we can now go to update the team, there's no need to change the index size\r",
							"            }\r",
							"            else if ( (teams_this_page === ReadTeamsIndexSize) && (!max_index_size))\r",
							"            {\r",
							"                // there could be a need to change the index size but we only do this if the number of teams returned last was the maximum number we asked for\r",
							"                // and when the max_index_size has not yet been set. max_index_size is set when we find out that SAC is limited the number of teams per page\r",
							"                let newindexsize = ReadTeamsIndexSize;\r",
							"                if (pm.response.responseTime>270000)\r",
							"                {\r",
							"                    newindexsize= Math.round(newindexsize * 0.6);\r",
							"                    //console.log(pm.info.requestName+' '+pm.info.eventName+': Last read was over 4 mins 30 sec. Reducing index size to keep under 5 mins. Index size now '+newindexsize);\r",
							"                }\r",
							"                else if (pm.response.responseTime>210000)\r",
							"                {\r",
							"                    newindexsize= Math.round(newindexsize * 0.8);\r",
							"                    //console.log(pm.info.requestName+' '+pm.info.eventName+': Last read was over 3 mins 30 sec. Reducing index size to keep under 5 mins. Index size now '+newindexsize);\r",
							"                }\r",
							"                else if (pm.response.responseTime<60000)\r",
							"                {\r",
							"                    newindexsize= Math.round(newindexsize * 2);\r",
							"                    //console.log(pm.info.requestName+' '+pm.info.eventName+': Last read was under 1 min. Increasing index size to improve throughput. Index size now '+newindexsize);\r",
							"                }\r",
							"                else if (pm.response.responseTime<120000)\r",
							"                {\r",
							"                    newindexsize= Math.round(newindexsize * 1.75);\r",
							"                    //console.log(pm.info.requestName+' '+pm.info.eventName+': Last read was under 2 mins. Increasing index size to improve throughput. Index size now '+newindexsize);            \r",
							"                };\r",
							"                if (newindexsize<1) {newindexsize=1};\r",
							"                pm.variables.set(\"ReadTeamsIndexSize\", newindexsize);   // set the new index size\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                // nothing to do.\r",
							"            };\r",
							"\r",
							"            // Define the next set of teams to query, it will start with the team after the last one\r",
							"            const Next_Read_Start_At = max_team_index_this_page + 1\r",
							"            pm.variables.set(\"StartTeamIndex\",Next_Read_Start_At);\r",
							"\r",
							"            // and the size of the last page may not be the full Index Size, it may well be shorter\r",
							"            ReadTeamsIndexSize=pm.variables.get(\"ReadTeamsIndexSize\");\r",
							"            if ((Next_Read_Start_At+ReadTeamsIndexSize-1) > total_teams_in_this_SAC_service)\r",
							"            {\r",
							"                pm.variables.set(\"ReadTeamsIndexSize\",(total_teams_in_this_SAC_service-Next_Read_Start_At+1))\r",
							"            };\r",
							"                \r",
							"            const read_all_teams_in_SAC = ( Next_Read_Start_At>total_teams_in_this_SAC_service);\r",
							"                    \r",
							"            if (read_all_teams_in_SAC )\r",
							"            {\r",
							"                    console.log('>>>>>> Total number of teams: '+total_teams_in_this_SAC_service+' <<<<<< ')\r",
							"                    postman.setNextRequest(null);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                postman.setNextRequest(pm.info.requestName);  // we call this same request again because we've not yet read all the teams\r",
							"            }; \r",
							"\r",
							"        };\r",
							"        break;\r",
							"        }   // end case response is 200\r",
							"    default:\r",
							"    {\r",
							"        // response code is unexpected\r",
							"        // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        ;\r",
							"        break;\r",
							"    }\r",
							"}; // end swtich pm.response.code\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let StartTeamIndex=pm.variables.get(\"StartTeamIndex\");\r",
							"if (!StartTeamIndex) { StartTeamIndex = 1}\r",
							"pm.variables.set(\"StartTeamIndex\", StartTeamIndex);\r",
							"\r",
							"let ReadTeamsIndexSize=pm.variables.get(\"ReadTeamsIndexSize\");\r",
							"if (!ReadTeamsIndexSize) {ReadTeamsIndexSize = parseInt(pm.collectionVariables.get(\"initial_read_index_size\")) }\r",
							"pm.variables.set(\"ReadTeamsIndexSize\", ReadTeamsIndexSize);\r",
							"\r",
							"const MaxTeamIndex=( StartTeamIndex + ReadTeamsIndexSize -1);\r",
							"// console.log(pm.info.requestName+' '+pm.info.eventName+': Reading teams '+StartTeamIndex+' to '+MaxTeamIndex);\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-csrf-token",
						"type": "text",
						"value": "{{x-csrf-token}}"
					},
					{
						"key": "x-sap-sac-custom-auth",
						"type": "text",
						"value": "true"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/scim/Groups/?startIndex={{StartTeamIndex}}&count={{ReadTeamsIndexSize}}",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"scim",
						"Groups",
						""
					],
					"query": [
						{
							"key": "startIndex",
							"value": "{{StartTeamIndex}}"
						},
						{
							"key": "count",
							"value": "{{ReadTeamsIndexSize}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET accesstoken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Getting access token');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else  // we are on a Cloud Foundary Platform\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"if (pm.response.code === 200)\r",
							"    {\r",
							"        const jsonData = JSON.parse(responseBody);\r",
							"        pm.environment.set(\"accesstoken\", jsonData.access_token);  // setting the accesstoken so its re-used for all subsequent requests\r",
							"        pm.environment.set(\"x-csrf-token\", \"fetch\");               // we will need to request a new csrf-token as we have a new session\r",
							"        postman.setNextRequest(pm.variables.get(\"recovery\"));      // we will now return to the request that sent us here in the first place\r",
							"    }\r",
							"else if (pm.response.code === 401)\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid username or password: '+ responseBody);\r",
							"        postman.setNextRequest(null);\r",
							"    }\r",
							"else\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Response Body: '+ responseBody);\r",
							"        if (pm.variables.get(\"recovery\") === pm.info.requestName)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Already attempted to get a valid request. Will now quit');\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Will make one more attempt to get a new accesstoken');\r",
							"            pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        ; //end if \r",
							"    }\r",
							"; // end if\r",
							"\r",
							"const errors=pm.variables.get(\"ContinuousErrors\");\r",
							"const maxerrors=3;  // maxerrors needs to be at least 2, otherwise valid workflows may be able to correctly recover from an invalid access tokens or invalid csrf-tokens\r",
							"\r",
							"if (errors >= maxerrors)\r",
							"{\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting');\r",
							"    pm.variables.set(\"ContinuousErrors\",0); \r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"else if (errors >= 2)\r",
							"{\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected');\r",
							"    // a valid accesstoken may have been obtained, but the request where it came from could have failed, hence the need to trap for a continous loop of errors here\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{Username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{SACtokenFQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{SACtokenFQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "initial_read_index_size",
			"value": "200"
		}
	]
}