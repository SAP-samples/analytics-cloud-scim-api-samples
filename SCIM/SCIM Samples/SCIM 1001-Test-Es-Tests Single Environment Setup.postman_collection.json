{
	"info": {
		"_postman_id": "db6bda1c-f45b-4b67-9947-b3b34e7e1b1e",
		"name": "SCIM 1001-Test-Es-Tests Single Environment Setup",
		"description": "# Provided 'as is'\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\n# User guide\n\n[https://d.dam.sap.com/a/kv3cXuB](https://d.dam.sap.com/a/kv3cXuB)\n\n# Blog (& for other related content)\n\n[https://community.sap.com/t5/technology-blogs-by-sap/sap-analytics-cloud-user-and-team-provisioning-scim-api-best-practices-and/ba-p/13509352](https://community.sap.com/t5/technology-blogs-by-sap/sap-analytics-cloud-user-and-team-provisioning-scim-api-best-practices-and/ba-p/13509352)\n\n# Questions\n\nPlease create a new question [https://community.sap.com/t5/forums/postpage/choose-node/true/board-id/technology-questions](https://community.sap.com/t5/forums/postpage/choose-node/true/board-id/technology-questions) (rather than a comment to the blog post since blog posts do not support threads)\n\n# About\n\nScript version 0.9\n\nSample scripts created by Matthew Shaw, SAP. [https://community.sap.com/t5/user/viewprofilepage/user-id/70553](https://community.sap.com/t5/user/viewprofilepage/user-id/70553)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31429660"
	},
	"item": [
		{
			"name": "GET accesstoken (Step 1 - obtain a valid token)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Getting an access token using the SACtokenFQDN as part of the access token URL');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else if (SAC_platform==='CF') // we are on a Cloud Foundary Platform\r",
							"{\r",
							"   pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"}\r",
							"else\r",
							"{\r",
							"    console.warn(pm.info.requestName+' '+pm.info.eventName+': Invalid SACplatform setting, assuming CF. Supported values: NEO, CF. SACplatform: '+ SAC_platform);\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"}\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACserviceFQDN : '+pm.variables.get(\"SACserviceFQDN\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACtokenFQDN   : '+pm.variables.get(\"SACtokenFQDN\"));\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACplatform    : '+pm.variables.get(\"SACplatform\"));\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Username       : '+pm.variables.get(\"Username\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"if (pm.response.code === 200)\r",
							"    {\r",
							"        const jsonData = JSON.parse(pm.response.text());\r",
							"        pm.environment.set(\"accesstoken\", jsonData.access_token);  // setting the accesstoken so its re-used for all subsequent requests\r",
							"        pm.environment.set(\"x-csrf-token\", \"fetch\");               // we will need to request a new csrf-token as we have a new session\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': Great! A valid accesstoken was obtained. This means your SACtokenFQDN, SACplatform, Username and Password are all valid. You can now test the SCIM endpoint. The accesstoken provided was '+jsonData.access_token+' and will be re-presented in the header of subsequent requests');\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': If the identify provider, '+pm.environment.get(\"SACtokenFQDN\")+', is hosted on the SAP Business Technology Platform then you can use the following URL in a web browser to observe the full SAML response which includes the \\'attributes\\' available to SAP Analytics Cloud. This is often very helpful when troubleshooting SAML attribute mapping issues. The URL is >>>>>>>>  https://'+pm.environment.get(\"SACtokenFQDN\")+'/config?action=who&details=true&trustMigrationOnly=true  <<<<<<<<');\r",
							"        pm.execution.setNextRequest();                                  // let the next request run (if being run in the runner)\r",
							"    }\r",
							"else if (pm.response.code === 401)\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid username or password: '+ pm.response.text());\r",
							"        pm.execution.setNextRequest(null);\r",
							"    }\r",
							"else\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Check your SACtokenFQDN is set correctly. Response Body: '+ pm.response.text());\r",
							"        pm.execution.setNextRequest(null);\r",
							"    }\r",
							"; // end if"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{Username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{SACtokenFQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{SACtokenFQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "READ users (Step 2 - read SCIM endpoint)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading SCIM API endpoint to obtain total user count. This will validate if the SACserviceFQDN is valid or not');\r",
							"\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACserviceFQDN : '+pm.variables.get(\"SACserviceFQDN\"));\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACtokenFQDN   : '+pm.variables.get(\"SACtokenFQDN\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACplatform    : '+pm.variables.get(\"SACplatform\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Username       : '+pm.variables.get(\"Username\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': accesstoken    : '+pm.variables.get(\"accesstoken\")+' (obtained from the token URL endpoint and re-presented to this endpoint)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Now making a request to the SCIM endpoint...');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Single Environment Setup OK\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							"\r",
							"if (pm.response.code === 401)\r",
							"{\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': A HTTP 401 status was returned. This means this session is not authorised, likely due to an invalid access token. Response Body: '+ pm.response.text());\r",
							"}\r",
							"else if (pm.response.code === 200)\r",
							"{\r",
							"    const readbody    = JSON.parse(pm.response.text());\r",
							"    const total_users_in_this_SAC_service= readbody.totalResults;\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Great! A valid response was obtained and means your SACserviceFQDN is set correctly. This SAP Analytics Cloud Service has '+total_users_in_this_SAC_service+' users');\r",
							"    \r",
							"    \r",
							"    // checking SAMLSSO Environment variable is set\r",
							"    \r",
							"    const samlsso=pm.variables.get(\"SAMLSSO\");\r",
							"    switch (samlsso)\r",
							"    {\r",
							"        case 'email':\r",
							"        case 'custom':\r",
							"        case 'userid':\r",
							"        case 'default':\r",
							"        {\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+': SAMLSSO                              : '+samlsso);\r",
							"            break;\r",
							"        }\r",
							"        case undefined:\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': SAMLSSO                              : Undefined! Variable set as \\'default\\' for you. Please update the environment variable SAMLSSO if SSO is enabled. Supported values: default, userid, email and custom');\r",
							"            pm.environment.set(\"SAMLSSO\",\"default\");\r",
							"            break;\r",
							"        }\r",
							"        default:  \r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': SAMLSSO                              : '+samlsso+'  (not set correctly. Please update the environment variable SAMLSSO to be: default, userid, email or custom)');\r",
							"            break;\r",
							"        }\r",
							"    };\r",
							"\r",
							"\r",
							"    let abort_after_continous_errors_reaches = parseInt(pm.variables.get(\"abort_after_continous_errors_reaches\"));\r",
							"    if ((abort_after_continous_errors_reaches   === undefined)|| (!Number.isInteger(abort_after_continous_errors_reaches  )))\r",
							"    {\r",
							"        abort_after_continous_errors_reaches   =3;\r",
							"        pm.environment.set(\"abort_after_continous_errors_reaches\",abort_after_continous_errors_reaches);\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': abort_after_continous_errors_reaches : Undefined! Variable set as \\'3\\' for you.');\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': abort_after_continous_errors_reaches : '+abort_after_continous_errors_reaches);\r",
							"    };\r",
							"    \r",
							"\r",
							"    // checking TimeZone variables are set\r",
							"\r",
							"    let timezone_hours   = parseInt(pm.variables.get(\"TimeZoneHours\"));\r",
							"    let timezone_minutes = parseInt(pm.variables.get(\"TimeZoneMinutes\"));\r",
							"    let timezone_text    = pm.variables.get(\"TimeZoneDescription\");\r",
							"\r",
							"    if ((timezone_hours   === undefined)|| (!Number.isInteger(timezone_hours  )))\r",
							"    {\r",
							"        timezone_hours   =0;\r",
							"        pm.environment.set(\"TimeZoneHours\",timezone_hours);\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': TimeZoneHours                        : Undefined! Variable set as \\'0\\' for you. Please update the environment variable TimeZoneHours to be a number between -23 and 23');\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': TimeZoneHours                        : '+timezone_hours);\r",
							"    };\r",
							"    \r",
							"    if ((timezone_minutes === undefined)|| (!Number.isInteger(timezone_minutes)))  \r",
							"    { \r",
							"        timezone_minutes =0;\r",
							"        pm.environment.set(\"TimeZoneMinutes\",timezone_minutes);\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': TimeZoneMinutes                      : Undefined! Variable set as \\'0\\' for you. Please update the environment variable TimeZoneMinutes to be -30, 0 or 30');\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': TimeZoneMinutes                      : '+timezone_minutes);\r",
							"    };\r",
							"\r",
							"    if (timezone_text     === undefined) \r",
							"    { \r",
							"        timezone_text    ='UTC';\r",
							"        pm.environment.set(\"TimeZoneDescription\",timezone_text);\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': TimeZoneDescription                  : Undefined! Variable set as \\'UTC\\' for you. Please update the environment variable TimeZoneDescription to be the description of your timezone');\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': TimeZoneDescription                  : '+timezone_text);\r",
							"    };\r",
							"\r",
							"\r",
							"    // checking SCIM_NewUserDefault varaibles are set\r",
							"\r",
							"    const preferredlanguage                 =pm.environment.get(\"SCIM_NewUserDefault_preferredlanguage\");  // possible values: 'ar', 'bg', 'zh-CN', 'zh-TW', 'hr', 'ca', 'cs', 'cy', 'nl', 'da', 'en', 'en-GB', 'fi', 'fr', 'fr-CA', 'de', 'de-CH', 'el', 'he', 'hi', 'hu', 'id', 'it', 'ja', 'ko', 'ms', 'no', 'pl', 'pt', 'pt-PT', 'ro', 'ru', 'sh', 'sk', 'sl', 'es', 'es-MX', 'sv', 'th', 'tr', 'uk', 'vi', 'en-US-sappsd' and possibly more will be added over time!\r",
							"\r",
							"    const dataaccesslanguage                =pm.environment.get(\"SCIM_NewUserDefault_dataaccesslanguage\"); // possible values: 'zz' (default), 'af', 'ar', 'bg',  ... many more as shown above in preferredlanguage.\r",
							"    const dateformatting                    =pm.environment.get(\"SCIM_NewUserDefault_dateformatting\");     // possible values include: 'MMM d, yyyy', 'dd/MM/yyyy', 'MM.dd.yyyy', ... many more!\r",
							"    const timeformatting                    =pm.environment.get(\"SCIM_NewUserDefault_timeformatting\");     // possible values include: 'H:mm:ss' (24H), 'h:mm:ss A' (12H)\r",
							"    const numberformatting                  =pm.environment.get(\"SCIM_NewUserDefault_numberformatting\");   // possible values include: '1,234.56', '1.234,56', '1 234,56'\r",
							"    const cleanupnotificationsnumberofdays  =pm.environment.get(\"SCIM_NewUserDefault_cleanupnotificationsnumberofdays\"); // possible values: 0, 1, 2, etc..\r",
							"    const systemnotificationsemailoptin     =pm.environment.get(\"SCIM_NewUserDefault_systemnotificationsemailoptin\"); // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"    \r",
							"    // marketingemailoptin is a legacy attribute that is no longer used. If it is present in the request body in the future, it will cause that request to fail.\r",
							"    // Thus, it is being removed now to prevent a failed request in the future. Given that it has no purpose today, it's very safe to remove it.\r",
							"    // const marketingemailoptin               =pm.environment.get(\"SCIM_NewUserDefault_marketingemailoptin\");                    // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"\r",
							"\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': New users will be created with the following values for their respective properties:');\r",
							"    if (preferredlanguage)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_preferredlanguage set as                  : '+ preferredlanguage);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        pm.environment.set(\"SCIM_NewUserDefault_preferredlanguage\", \"en\");    // possible values: 'ar', 'bg', 'zh-CN', 'zh-TW', 'hr', 'ca', 'cs', 'cy', 'nl', 'da', 'en', 'en-GB', 'fi', 'fr', 'fr-CA', 'de', 'de-CH', 'el', 'he', 'hi', 'hu', 'id', 'it', 'ja', 'ko', 'ms', 'no', 'pl', 'pt', 'pt-PT', 'ro', 'ru', 'sh', 'sk', 'sl', 'es', 'es-MX', 'sv', 'th', 'tr', 'uk', 'vi', 'en-US-sappsd' and possibly more will be added over time!\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_preferredlanguage                        : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_preferredlanguage\")+'\\'');\r",
							"\r",
							"    };\r",
							"\r",
							"\r",
							"    if (dataaccesslanguage)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_dataaccesslanguage set as                 : '+ dataaccesslanguage);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        pm.environment.set(\"SCIM_NewUserDefault_dataaccesslanguage\", \"en\");    // possible values: 'zz' (default), 'af', 'ar', 'bg',  ... many more as shown above in preferredlanguage.\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_dataaccesslanguage                       : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_dataaccesslanguage\")+'\\''); \r",
							"    };\r",
							"\r",
							"\r",
							"    if (dateformatting)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_dateformatting set as                     : '+ dateformatting);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        pm.environment.set(\"SCIM_NewUserDefault_dateformatting\", \"MMM d, yyyy\");    // possible values include: 'MMM d, yyyy', 'dd/MM/yyyy', 'MM.dd.yyyy', ... many more!\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_dateformatting                           : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_dateformatting\")+'\\''); \r",
							"    };\r",
							"\r",
							"\r",
							"    if (timeformatting)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_timeformatting set as                     : '+ timeformatting);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        pm.environment.set(\"SCIM_NewUserDefault_timeformatting\", \"H:mm:ss\");    // possible values include: 'H:mm:ss' (24H), 'h:mm:ss A' (12H)\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_timeformatting                           : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_timeformatting\")+'\\''); \r",
							"    };\r",
							"\r",
							"\r",
							"    if (numberformatting)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_numberformatting set as                   : '+ numberformatting);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        pm.environment.set(\"SCIM_NewUserDefault_numberformatting\", \"1,234.56\");    // possible values include: 'MMM d, yyyy', 'dd/MM/yyyy', 'MM.dd.yyyy', ... many more!\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_numberformatting                         : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_numberformatting\")+'\\''); \r",
							"    };\r",
							"\r",
							"    if (cleanupnotificationsnumberofdays)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_cleanupnotificationsnumberofdays set as   : '+ cleanupnotificationsnumberofdays);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        pm.environment.set(\"SCIM_NewUserDefault_cleanupnotificationsnumberofdays\", \"0\");    // possible values include: 'MMM d, yyyy', 'dd/MM/yyyy', 'MM.dd.yyyy', ... many more!\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_cleanupnotificationsnumberofdays         : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_cleanupnotificationsnumberofdays\")+'\\''); \r",
							"    };\r",
							" \r",
							"\r",
							"    if (systemnotificationsemailoptin)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_systemnotificationsemailoptin set as      : '+ systemnotificationsemailoptin);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        pm.environment.set(\"SCIM_NewUserDefault_systemnotificationsemailoptin\", \"true\");    // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"        console.warn(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_systemnotificationsemailoptin            : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_systemnotificationsemailoptin\")+'\\''); \r",
							"    };\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"}\r",
							"else // response code is unexpected\r",
							"{\r",
							"    // we got an unexpected response from the SAC API\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response Body: '+ pm.response.text());\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-sap-sac-custom-auth",
						"value": "true",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/scim/Users/?startIndex=1&count=1",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"scim",
						"Users",
						""
					],
					"query": [
						{
							"key": "startIndex",
							"value": "1"
						},
						{
							"key": "count",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FETCH csrf token (Step 3 - read general API endpoint)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info(pm.info.requestName+' '+pm.info.eventName+': Reading general API endpoint to obtain a new x-csrf-token. This will validate if the SACserviceFQDN is valid or not. It will also validate the general API endpoint');\r",
							"\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACserviceFQDN : '+pm.variables.get(\"SACserviceFQDN\"));\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACtokenFQDN   : '+pm.variables.get(\"SACtokenFQDN\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACplatform    : '+pm.variables.get(\"SACplatform\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Username       : '+pm.variables.get(\"Username\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': accesstoken    : '+pm.variables.get(\"accesstoken\")+' (obtained from the token URL endpoint and re-presented to this endpoint)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Now making a request to the general API endpoint...');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Fetch x-csrf-token\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,429]);\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken or the csrf-token must be invalid. We shall get new ones of each!\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new access token');\r",
							"        pm.execution.setNextRequest(\"GET accesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"        break;\r",
							"    } // end if response is 401\r",
							"\r",
							"    case 429:\r",
							"    {\r",
							"        const retryafter=(pm.response.headers.get('Retry-After')!=undefined) ? parseInt(pm.response.headers.get('Retry-After')) : 5000;\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SAP Analytics Cloud is receiving too many requests. Retrying in '+retryafter+'ms');\r",
							"        setTimeout(()=> {},retryafter);\r",
							"        pm.execution.setNextRequest(pm.info.requestName);\r",
							"        break;\r",
							"    }\r",
							"    \r",
							"    case 200:\r",
							"    {\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': Great! A valid x-csrf-token was fetched from the /csrf endpoint. This means the general API of SAP Analytics Cloud is available');\r",
							"        pm.environment.set(\"x-csrf-token\",pm.response.headers.get(\"x-csrf-token\"));\r",
							"        const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"        if (SAC_platform==='NEO')\r",
							"        {\r",
							"            pm.execution.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            pm.execution.setNextRequest()\r",
							"        }\r",
							"        \r",
							"        break;\r",
							"    }\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"        // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=parseInt( (pm.environment.get(\"abort_after_continous_errors_reaches\")!=undefined) ? parseInt(pm.environment.get(\"abort_after_continous_errors_reaches\")) : 3 );  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ pm.response.text());\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            pm.execution.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ pm.response.text());\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ pm.response.text());\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        };\r",
							"    } // end switch pm.response.code\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "fetch",
						"type": "text"
					},
					{
						"key": "x-sap-sac-custom-auth",
						"value": "true",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/csrf",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"csrf"
					]
				}
			},
			"response": []
		},
		{
			"name": "READ system owner (Step 4 - Display System Owner)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"READ system owner\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403,429]);\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken or the csrf-token must be invalid. We shall get new ones of each!\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tokens: accesstoken & x-csrf-token');\r",
							"        pm.execution.setNextRequest(\"GET accesstoken (Step 1 - obtain a valid token)\");        \r",
							"        pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"        break;\r",
							"    } // end case 401 \r",
							"\r",
							"    case 429:\r",
							"    // in the event SAP Analytics Cloud is receiving too many requests, a HTTP response 429 will be issued.\r",
							"    // in such a case, we shall wait for the 'Retry-After' value and simply re-attempt the same request.\r",
							"    {\r",
							"        const retryafter=(pm.response.headers.get('Retry-After')!=undefined) ? parseInt(pm.response.headers.get('Retry-After')) : 5000;\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': SAP Analytics Cloud is receiving too many requests. Retrying in '+retryafter+'ms');\r",
							"        setTimeout(()=> {},retryafter);\r",
							"        pm.execution.setNextRequest(pm.info.requestName);\r",
							"        break;\r",
							"    }  // end case 429\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"        // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"        pm.variables.set(\"ContinuousErrors\",0);\r",
							"\r",
							"        const readbody                  = JSON.parse(pm.response.text());\r",
							"        const totalResults              = readbody.totalResults;\r",
							"  //      console.log(\"totalResults\", totalResults);\r",
							"        if (totalResults===1)\r",
							"        {\r",
							"            const system_owner       =readbody.Resources[0];\r",
							"            const teams = system_owner.groups===undefined ? 0 : system_owner.groups.length;\r",
							"            \r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+\": System Owner:                  UUID (SCIMv2 property id): \"+system_owner.id);\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+\": System Owner:         User ID (SCIMv2 property userName): \"+system_owner.userName);\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+\": System Owner: display name (SCIMv2 property displayName): \"+system_owner.displayName);\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+\": System Owner:             email (SCIMv2 property emails): \"+system_owner.emails[0].value);\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+\": System Owner:      idpUserId (SCIMv2 property idpUserId): \"+system_owner[\"urn:sap:params:scim:schemas:extension:sac:2.0:user-custom-parameters\"].idpUserId);\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+\": System Owner:    externalId (SCIMv2 property externalId): \"+system_owner.externalId);\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+\": System Owner:                             is a member of: \"+teams+' teams');\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+\": System Owner:                    full SCIM API meta data: \",system_owner);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+\": System Owner not found.\");\r",
							"        }\r",
							"        pm.execution.setNextRequest(null);\r",
							"        break;\r",
							"    }   // end case response is 200\r",
							"    default:\r",
							"    {\r",
							"        // response code is unexpected\r",
							"        // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=parseInt( (pm.environment.get(\"abort_after_continous_errors_reaches\")!=undefined) ? parseInt(pm.environment.get(\"abort_after_continous_errors_reaches\")) : 3 );  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ pm.response.text());\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            pm.execution.setNextRequest(NextPostmanRequest());\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ pm.response.text());\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ pm.response.text());\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        ;\r",
							"        break;\r",
							"    }\r",
							"}; // end swtich pm.response.code\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"filter_for_userids\",\r",
							"      \"roles.value eq \\\\\\\"\"\r",
							"    + \"PROFILE:sap.epm:System_Owner\" \r",
							"    + \"\\\\\\\" \" );\r",
							"\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading system owner');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "{{x-csrf-token}}",
						"type": "text"
					},
					{
						"key": "x-sap-sac-custom-auth",
						"value": "true",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"],\r\n     \"filter\":\r\n        \"{{filter_for_userids}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/scim2/Users/.search",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"scim2",
						"Users",
						".search"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}