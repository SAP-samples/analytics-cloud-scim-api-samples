{
	"info": {
		"_postman_id": "4736337e-ef01-4394-91a8-d82cb8379cbf",
		"name": "Embedded 711-E-Display & Check System Configuration",
		"description": "# Provided 'as is'\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\n# User guide\n\n[https://d.dam.sap.com/a/Wg2pPhA](https://d.dam.sap.com/a/Wg2pPhA/)\n\n# Blog (for Q&A)\n\n[https://blogs.sap.com/2021/05/28/sap-analytics-cloud-scim-api-best-practices-and-sample-scripts/](https://blogs.sap.com/2021/05/28/sap-analytics-cloud-scim-api-best-practices-and-sample-scripts/)\n\n# About\n\nScript version 0.7\n\nSample scripts created by Matthew Shaw, SAP. [https://people.sap.com/matthew.shaw/#content:blogposts](https://people.sap.com/matthew.shaw/#content:blogposts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "READ System Configuration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading System Configuration');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"READ System Configuration\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403])\r",
							"    }\r",
							");\r",
							"\r",
							"pm.test(\"Does not have an inconsistent status\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().inconsistent).to.equal(false) };\r",
							"    }\r",
							");\r",
							"\r",
							"pm.test(\"Has at least 1 OAuth Client with SCIM API role and API Access\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().oauthClients.some( (OAuthClient) => {return (OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:SCIM_Public_API\") &&OAuthClient.apiAccessEnabled)})).to.equal(true) };\r",
							"    }\r",
							");\r",
							"\r",
							"pm.test(\"OAuth Client defined in this Postman Environment variable Embedded_OAuthClientName includes the SCIM Public API role with API Access\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().oauthClients.some( (OAuthClient) => {return( ( (OAuthClient.name === (pm.variables.get(\"Embedded_OAuthClientName\"))) && OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:SCIM_Public_API\") && (OAuthClient.apiAccessEnabled)))})).to.equal(true) };\r",
							"    }\r",
							");\r",
							"\r",
							" pm.test(\"OAuth Client defined in this Postman Environment variable Embedded_OAuthClientName includes the Story Listing API role with API Access\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().oauthClients.some( (OAuthClient) => {return( ( (OAuthClient.name === (pm.variables.get(\"Embedded_OAuthClientName\"))) && OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:Story_Listing_Public_API\") && (OAuthClient.apiAccessEnabled)))})).to.equal(true) };\r",
							"    }\r",
							")\r",
							"\r",
							"pm.test(\"OAuth Client defined in this Postman Environment variable Embedded_OAuthClientName includes the Modeling Public API role with API Access\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().oauthClients.some( (OAuthClient) => {return( ( (OAuthClient.name === (pm.variables.get(\"Embedded_OAuthClientName\"))) && OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:Modeling_Public_API\") && (OAuthClient.apiAccessEnabled)))})).to.equal(true) };\r",
							"    }\r",
							")\r",
							"\r",
							"pm.test(\"Has at least 1 Live Connection\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().liveConnections.length).to.be.greaterThan(0) };\r",
							"    }\r",
							");\r",
							"\r",
							"pm.test(\"Has at least 1 Trusted IdP\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().trustedIdps.length).to.be.greaterThan(0) };\r",
							"    }\r",
							");\r",
							"\r",
							"pm.test(\"Has Custom IdP enabled\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().customIdp.customIdpEnabled).to.equal(true) };\r",
							"    }\r",
							");\r",
							"\r",
							"pm.test(\"This Postman Environment variable SAMLSSO setting is correct\", function ()\r",
							"    {\r",
							"        if ((pm.response.code === 200) )\r",
							"        {\r",
							"            if (pm.response.json().customIdp.customIdpEnabled)\r",
							"            {\r",
							"                pm.expect((pm.response.json().customIdp.nameIdColumn)).to.eql(pm.variables.get(\"SAMLSSO\"))\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.expect((pm.response.json().customIdp.nameIdColumn)).to.eql(\"default\")\r",
							"            }\r",
							"        };\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"        // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"        pm.variables.set(\"ContinuousErrors\",0);\r",
							"        pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"\r",
							"        // we shall create an array of enteries which store the default settings. This will help compare the current settings and highlight what has been changed\r",
							"        const default_system_configuration = [];\r",
							"        default_system_configuration.push({name:\"MOBILE_REFRESH_ON_OPEN\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"PM_URL_TP_IDP\",value:undefined});\r",
							"        default_system_configuration.push({name:\"COMMENT_EMBEDDED\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"MOBILE_REMOTE_SAFARI_IDP_URL\",value:\"https://\"});\r",
							"        default_system_configuration.push({name:\"COMMENTS_MODEL_DIM_MEMBERS\",value:\"50000\"});\r",
							"        default_system_configuration.push({name:\"USER_CONTENT_TRANSLATION\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"TENANT_CURRENCY_SUBTITLE\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"SAML_USER_PROFILE_URL\",value:undefined});\r",
							"        default_system_configuration.push({name:\"SESSION_KEEP_ALIVE_SECONDS\",value:\"30\"});\r",
							"        default_system_configuration.push({name:\"DELETED_FILES_EXPIRY_DAYS\",value:\"30\"});\r",
							"        default_system_configuration.push({name:\"REVERSE_PROXY_HOST\",value:undefined});\r",
							"        default_system_configuration.push({name:\"EXTERNAL_AVATAR_WHITELIST\",value:undefined});\r",
							"        default_system_configuration.push({name:\"MAX_BW_DRILL_LEVEL\",value:\"5\"});\r",
							"        default_system_configuration.push({name:\"FDE_BATCH_WAITING_TIME\",value:\"1000\"});\r",
							"        default_system_configuration.push({name:\"ENABLE_PERSONAL_DATA_PROMPT\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"NR_PARALLEL_SESSION_FOR_BW\",value:\"0\"});\r",
							"        default_system_configuration.push({name:\"MOBILE_REMOTE_IDP_URL\",value:\"https://\"});\r",
							"        default_system_configuration.push({name:\"ENABLE_ON_PREMISE_FILE_EXPORT\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"TENANT_METRIC_NO_DATA_FORMAT\",value:undefined});\r",
							"        default_system_configuration.push({name:\"ALLOW_SCHEDULE_PUBLICATION\",value:\"true\"});\r",
							"        default_system_configuration.push({name:\"AR_SESSION_TIMEOUT_V2\",value:\"3600\"});\r",
							"        default_system_configuration.push({name:\"MOBILE_DEFAULT_FILTER\",value:\"0\"});\r",
							"        default_system_configuration.push({name:\"DEFAULT_APP\",value:\"0\"});\r",
							"        default_system_configuration.push({name:\"COMMENTS_PER_MODEL_LIMIT\",value:\"3000\"});\r",
							"        default_system_configuration.push({name:\"MOBILE_REMOTE_SAFARI_SAML\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"TENANT_NO_DATA_FORMAT\",value:undefined});\r",
							"        default_system_configuration.push({name:\"BW_RESPECT_VIZ_DEFAULTING\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"TENANT_CURRENCY_FORMAT\",value:undefined});\r",
							"        default_system_configuration.push({name:\"BROWSER_CACHE_STORAGE_TIME\",value:\"8\"});\r",
							"        default_system_configuration.push({name:\"EXPORT_PACKAGE_SIZE\",value:\"50000\"});\r",
							"        default_system_configuration.push({name:\"DISABLE_MOBILE_APP_PASSWORD\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"ENABLE_ON_PREMISE_FILE\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"ALLOW_SHARING_TO_ALL_USERS\",value:\"true\"});\r",
							"        default_system_configuration.push({name:\"PREDICTIVE_BI_FORECAST_REMOTE\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"DISABLE_MOBILE_CACHING_IOS\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"ENABLE_EXPORT_IMPORT_JOB\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"COULD_DEL_DISCUSSION\",value:\"true\"});\r",
							"        default_system_configuration.push({name:\"REMOVE_STORY_URL_FROM_APPENDIX\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"TRACE_LEVEL\",value:\"4\"});\r",
							"        default_system_configuration.push({name:\"CUSTOMIZE_COMMUNITY_URL\",value:undefined});\r",
							"        default_system_configuration.push({name:\"X509_ISSUER_NAME\",value:\"CN=SSO_CA, O=SAP-AG, C=DE\"});\r",
							"        default_system_configuration.push({name:\"GEO_LIVE_SYNONYM_SUPPORT\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"ALLOW_PUBLICATION_BURSTING\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"ALLOW_NON_SAC\",value:\"true\"});\r",
							"        default_system_configuration.push({name:\"MOBILE_DEFAULT_TAB\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"TENANT_SHOW_CURRENCY_AS\",value:undefined});\r",
							"        default_system_configuration.push({name:\"MOBILE_REMOTE_TOKEN\",value:\"HEADER_KEY_1=<<token>>\"});\r",
							"        default_system_configuration.push({name:\"TENANT_SCALE_FORMAT\",value:undefined});\r",
							"        default_system_configuration.push({name:\"CHART_PROGRESSIVE_RENDERING\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"ALLOW_ACN_COPY_CONTENT\",value:\"false\"});\r",
							"        default_system_configuration.push({name:\"ALLOW_ACN_PACKAGE_SHARING_OEM\",value:\"false\"});\r",
							"    \r",
							"        const readbody    = JSON.parse(responseBody);\r",
							"\r",
							"        function myfunction_DisplaySystemConfig( entry, index)\r",
							"        {\r",
							"            const default_value=default_system_configuration.find( element => entry.name === element.name);\r",
							"            if ( default_value )\r",
							"            {\r",
							"                const default_set = (default_value.value===entry.value);\r",
							"                if (default_set)\r",
							"                {\r",
							"                    const entryvaluelength = (typeof entry.value === 'undefined') ? 9:entry.value.length;                   \r",
							"                    let spaces_needed=(100-entry.name.length-index.toString().length-entryvaluelength);\r",
							"                    if (spaces_needed<1) {spaces_needed=1};\r",
							"                    const spaces=\" \".repeat(spaces_needed);\r",
							"                    console.log( index+': '+entry.name + ': '+ entry.value+spaces+' (this is the default setting)');                  \r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    const entryvaluelength = (typeof entry.value === 'undefined') ? 9:entry.value.length;                   \r",
							"                    let spaces_needed=(50-entry.name.length-index.toString().length-entryvaluelength);\r",
							"                    if (spaces_needed<1) {spaces_needed=1};\r",
							"                    const spaces=\" \".repeat(spaces_needed);\r",
							"                    console.info( index+': '+entry.name + ': '+ entry.value+spaces+' (changed from the default: '+ default_value.value+')');\r",
							"                };\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                const entryvaluelength = (typeof entry.value === 'undefined') ? 9:entry.value.length;                   \r",
							"                let spaces_needed=(50-entry.name.length-index.toString().length-entryvaluelength);\r",
							"                if (spaces_needed<1) {spaces_needed=1};\r",
							"                const spaces=\" \".repeat(spaces_needed);\r",
							"                console.log( index+': '+entry.name + ': '+ entry.value+spaces+ ' (no default setting defined)');\r",
							"            }\r",
							"        };\r",
							"\r",
							"        function myfunction_DisplayOAuthClients( entry, index )\r",
							"        {\r",
							"            const this_OAuth_Client_matches_this_Postman_Environment = (pm.variables.get(\"Embedded_OAuthClientName\")===entry.name);\r",
							"            console.log('==================== : OAuth Client configuration index: '+ index);\r",
							"            console.log('                  id : '+entry.id);\r",
							"            \r",
							"            if (this_OAuth_Client_matches_this_Postman_Environment)\r",
							"            {\r",
							"                let spaces=\" \".repeat(80-entry.name.length);\r",
							"                console.info('                name : '+entry.name+spaces+' <------------- This OAuth Client is the one defined in this Postman Environment');\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                console.log('                name : '+entry.name);\r",
							"            }\r",
							"            \r",
							"            \r",
							"            if (this_OAuth_Client_matches_this_Postman_Environment)\r",
							"            {\r",
							"                let spaces_needed=80-entry.apiRoles.toString().length;\r",
							"                if (spaces_needed<1) {spaces_needed=1}\r",
							"                const spaces=\" \".repeat(spaces_needed);\r",
							"                console.info('            apiRoles : '+entry.apiRoles+spaces+' <------------- Roles available for the OAuth Client defined in this Postman Environment');\r",
							"\r",
							"                if (entry.apiAccessEnabled)\r",
							"                {\r",
							"                    let spaces_needed=80-entry.apiAccessEnabled.toString().length;\r",
							"                    if (spaces_needed<1) {spaces_needed=1}\r",
							"                    const spaces=\" \".repeat(spaces_needed);\r",
							"                    console.info('    apiAccessEnabled : '+entry.apiAccessEnabled+spaces+' <------------- This OAuth Client correctly enables API access');\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    let spaces_needed=80-entry.apiAccessEnabled.toString().length;\r",
							"                    if (spaces_needed<1) {spaces_needed=1}\r",
							"                    const spaces=\" \".repeat(spaces_needed);\r",
							"                    console.error('    apiAccessEnabled : '+entry.apiAccessEnabled+spaces+' <------------- This OAuth Client is not enabled for API access');\r",
							"                };\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                console.log('            apiRoles : '+entry.apiRoles);\r",
							"                console.log('    apiAccessEnabled : '+entry.apiAccessEnabled);\r",
							"            }\r",
							"            console.log('        redirectUris : '+entry.redirectUris);\r",
							"            console.log('          grantTypes : '+entry.grantTypes);\r",
							"            if (this_OAuth_Client_matches_this_Postman_Environment)\r",
							"            {\r",
							"                if ( (entry.clientId!=pm.variables.get(\"Username\")) )\r",
							"                {\r",
							"                    let spaces_needed=80-entry.clientId.toString().length;\r",
							"                    if (spaces_needed<1) {spaces_needed=1}\r",
							"                    const spaces=\" \".repeat(spaces_needed);\r",
							"                    console.error('            clientId : '+entry.clientId+spaces+' <------------- This Postman environment needs to be updated with a new Username');\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    let spaces_needed=80-entry.clientId.toString().length;\r",
							"                    if (spaces_needed<1) {spaces_needed=1}\r",
							"                    const spaces=\" \".repeat(spaces_needed);\r",
							"                    console.info('            clientId : '+entry.clientId+spaces+' <------------- This Postman environment Username is set correctly');\r",
							"                };\r",
							"                if ( (entry.clientSecret!=pm.variables.get(\"Password\")))\r",
							"                {\r",
							"                    let spaces_needed=80-entry.clientSecret.toString().length;\r",
							"                    if (spaces_needed<1) {spaces_needed=1}\r",
							"                    const spaces=\" \".repeat(spaces_needed);\r",
							"                    console.error('        clientSecret : '+entry.clientSecret+spaces+' <------------- This Postman environment needs to be updated with a new Password');\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    let spaces_needed=80-entry.clientSecret.toString().length;\r",
							"                    if (spaces_needed<1) {spaces_needed=1}\r",
							"                    const spaces=\" \".repeat(spaces_needed);\r",
							"                    console.info('        clientSecret : '+entry.clientSecret+spaces+' <------------- This Postman environment Password is set correctly');\r",
							"                };                \r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                console.log('            clientId : '+entry.clientId);\r",
							"                console.log('        clientSecret : '+entry.clientSecret);\r",
							"            }; // end if\r",
							"            console.log('====================');\r",
							"        };\r",
							"\r",
							"        function myfunction_DisplayLiveConnections( entry, index)\r",
							"        {\r",
							"            console.log('==================== : Live Connection configuration index: '+index+'       id: '+entry.id);\r",
							"            // we need to display the entire Live Connection definition. Since each connection can contain different value pairs we don't necessarily know what they all are\r",
							"            // thus we must loop though the array to print them all out.\r",
							"            let keys =Object.keys(entry);               // keys becomes an array of the key values, like id, name, host, port etc.\r",
							"            keys.forEach( myfunction_DisplayEntry );    // for each of the key value pairs we call myfunction_DisplayEntry\r",
							"\r",
							"            function myfunction_DisplayEntry( key )\r",
							"            {\r",
							"                let spaces_needed=21-key.length;\r",
							"                if (spaces_needed<1) {spaces_needed=1}\r",
							"                const spaces=\" \".repeat(spaces_needed);\r",
							"                console.log(spaces+key+' : '+entry[key]);  // key is the 'id', 'name', 'host', 'port' etc, and the entry[key] is the value it has.\r",
							"            };\r",
							"            console.log('====================');\r",
							"\r",
							"        };\r",
							"\r",
							"        function myfunction_DisplayTrustedOrigins( entry )\r",
							"        {\r",
							"            console.log('                     : '+entry);\r",
							"        };\r",
							"\r",
							"        function myfunction_DisplaytrustedIdps( entry )\r",
							"        {\r",
							"            console.log('                       Trusted IdPs configuration');\r",
							"            console.log('                name : '+entry.name);\r",
							"            console.log('             idpName : '+entry.idpName);\r",
							"            console.log('      idpCertificate : '+entry.idpCertificate);\r",
							"            console.log('====================');\r",
							"        };\r",
							"\r",
							"        console.log(\"======================================================== System Configuration ========================================================\");\r",
							"        readbody.tenantSystemConfig.forEach( myfunction_DisplaySystemConfig);\r",
							"        console.log(\"             Created : \"+readbody.creationDate);\r",
							"        console.log(\"          Expiration : \"+readbody.expirationDate);\r",
							"        console.log(\"      Sub Account ID : \"+readbody.customProperties.subAccountId);\r",
							"        console.log(\" Service Instance ID : \"+readbody.customProperties.serviceInstanceId);\r",
							"\r",
							"\r",
							"        const SACserviceFQDNmatches_PostmanEnvironment = (readbody.publicFqdn===pm.environment.get(\"SACserviceFQDN\"))\r",
							"        let spaces=\" \".repeat(80-readbody.publicFqdn.length);\r",
							"        if (SACserviceFQDNmatches_PostmanEnvironment)\r",
							"        {\r",
							"            console.info(\"         Public FQDN : \"+readbody.publicFqdn+spaces+' <------------- This Postman environment SACserviceFQDN is set correctly');           \r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(\"         Public FQDN : \"+readbody.publicFqdn+spaces+' <------------- This Postman environment needs to be updated with a new SACserviceFQDN');\r",
							"        }\r",
							"\r",
							"        spaces=\" \".repeat(80-readbody.tokenUrl.substr(0,readbody.tokenUrl.indexOf(\"/\")).length);\r",
							"        if  (readbody.tokenUrl.substr(0,readbody.tokenUrl.indexOf(\"/\"))===pm.environment.get(\"SACtokenFQDN\"))\r",
							"        {\r",
							"            console.info(\"      Token URL FQDN : \"+readbody.tokenUrl.substr(0,readbody.tokenUrl.indexOf(\"/\"))+spaces+' <------------- This Postman environment SACtokenFQDN is set correctly');\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(\"      Token URL FQDN : \"+readbody.tokenUrl.substr(0,readbody.tokenUrl.indexOf(\"/\"))+spaces+' <------------- This Postman environment needs to be updated with a new SACtokenFQDN');\r",
							"        }\r",
							"\r",
							"        const oauthClients=readbody.oauthClients;\r",
							"        console.info(\"       OAuth Clients : \"+oauthClients.length);\r",
							"\r",
							"        if ( (oauthClients.some( (OAuthClient) => {return( ( (OAuthClient.name === (pm.variables.get(\"Embedded_OAuthClientName\"))) && OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:SCIM_Public_API\") && (OAuthClient.apiAccessEnabled)))})) )\r",
							"        {\r",
							"            console.info(\"                     : of these \"+oauthClients.filter( (OAuthClient) => {return OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:SCIM_Public_API\") && OAuthClient.apiAccessEnabled}).length+\" includes the SCIM_Public_API role with API access enabled             <------------- This Postman environment OAuthClientName matches one of these\");\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(\"                     : of these \"+oauthClients.filter( (OAuthClient) => {return OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:SCIM_Public_API\") && OAuthClient.apiAccessEnabled}).length+\" includes the SCIM_Public_API role with API access enabled             <------------- This Postman environment OAuthClientName does NOT match any of these\");\r",
							"        };\r",
							"\r",
							"        if ( (oauthClients.some( (OAuthClient) => {return( ( (OAuthClient.name === (pm.variables.get(\"Embedded_OAuthClientName\"))) && OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:Story_Listing_Public_API\") && (OAuthClient.apiAccessEnabled)))})) )\r",
							"        {\r",
							"            console.info(\"                     : of these \"+oauthClients.filter( (OAuthClient) => {return OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:Story_Listing_Public_API\") && OAuthClient.apiAccessEnabled}).length+\" includes the Story_Listing_Public_API role with API access enabled    <------------- This Postman environment OAuthClientName matches one of these\");\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(\"                     : of these \"+oauthClients.filter( (OAuthClient) => {return OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:Story_Listing_Public_API\") && OAuthClient.apiAccessEnabled}).length+\" includes the Story_Listing_Public_API role with API access enabled    <------------- This Postman environment OAuthClientName does NOT match any of these\");\r",
							"        };\r",
							"\r",
							"        if ( (oauthClients.some( (OAuthClient) => {return( ( (OAuthClient.name === (pm.variables.get(\"Embedded_OAuthClientName\"))) && OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:Modeling_Public_API\") && (OAuthClient.apiAccessEnabled)))})) )\r",
							"        {\r",
							"            console.info(\"                     : of these \"+oauthClients.filter( (OAuthClient) => {return OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:Modeling_Public_API\") && OAuthClient.apiAccessEnabled}).length+\" includes the Modeling_Public_API role with API access enabled         <------------- This Postman environment OAuthClientName matches one of these\");\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(\"                     : of these \"+oauthClients.filter( (OAuthClient) => {return OAuthClient.apiRoles.includes(\"PROFILE:sap.epm:Modeling_Public_API\") && OAuthClient.apiAccessEnabled}).length+\" includes the Modeling_Public_API role with API access enabled         <------------- This Postman environment OAuthClientName does NOT match any of these\");\r",
							"        };\r",
							"\r",
							"\r",
							"        oauthClients.forEach( myfunction_DisplayOAuthClients );\r",
							"\r",
							"        const trustedIdps=readbody.trustedIdps;\r",
							"        console.log(\"        Trusted IdPs : \"+trustedIdps.length);\r",
							"        trustedIdps.forEach( myfunction_DisplaytrustedIdps);\r",
							"\r",
							"        console.log(\"          Custom IdP : \"+readbody.customIdp.customIdpEnabled);\r",
							"        console.log(\"Custom IdP Entity ID : \"+readbody.customIdp.entityID);\r",
							"\r",
							"        if (readbody.customIdp!=undefined)\r",
							"        {\r",
							"            spaces=\" \".repeat(80-readbody.customIdp.nameIdColumn.length);\r",
							"            if (readbody.customIdp.customIdpEnabled)\r",
							"            {\r",
							"                if ((pm.variables.get(\"SAMLSSO\")===readbody.customIdp.nameIdColumn))\r",
							"                {\r",
							"                    console.log(\"    & Name ID column : \"+readbody.customIdp.nameIdColumn+spaces+' <------------- This Postman environment SAMLSSO is set correctly');\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    console.error(\"    & Name ID column : \"+readbody.customIdp.nameIdColumn+spaces+' <------------- This Postman environment SAMLSSO is NOT set correctly');\r",
							"                };\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                if ((pm.variables.get(\"SAMLSSO\")==='default'))\r",
							"                {\r",
							"                    console.log(\"    & Name ID column : \"+readbody.customIdp.nameIdColumn+spaces+' <------------- This Postman environment SAMLSSO is set correctly');\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    console.error(\"    & Name ID column : \"+readbody.customIdp.nameIdColumn+spaces+' <------------- This Postman environment SAMLSSO is NOT set correctly');\r",
							"                };\r",
							"            };\r",
							"\r",
							"            console.log('====================');\r",
							"        };\r",
							"\r",
							"        const liveConnections=readbody.liveConnections;\r",
							"        console.log(\"    Live Connections : \"+liveConnections.length);\r",
							"        liveConnections.forEach( myfunction_DisplayLiveConnections);\r",
							"\r",
							"        const trustedOrigins=readbody.trustedOrigins;\r",
							"        console.log(\"     Trusted Origins : \"+trustedOrigins.length);\r",
							"        trustedOrigins.forEach( myfunction_DisplayTrustedOrigins);\r",
							"\r",
							"        console.log(\"   Content Namespace : \"+readbody.tenantSystemConfig.find( element => element.name === 'CONTENT_PACKAGE').value);\r",
							"        const inconsistent=readbody.inconsistent;\r",
							"        if (inconsistent)\r",
							"        {\r",
							"            console.error(\"        Inconsistent : \"+inconsistent+'   Reason : '+readbody.inconsistentReason);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.info(\"        Inconsistent : \"+inconsistent);\r",
							"        };\r",
							"\r",
							"        postman.setNextRequest(null);\r",
							"        break;\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"        // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET tenantaccesstoken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Getting tenant access token');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else  // we are on a Cloud Foundary Platform\r",
							"{\r",
							"   pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 200:\r",
							"    {\r",
							"        const jsonData = JSON.parse(responseBody);\r",
							"        pm.environment.set(\"tenantaccesstoken\", jsonData.access_token);  // setting the tenantaccesstoken so its re-used for all subsequent requests\r",
							"        postman.setNextRequest(pm.variables.get(\"recovery\"));      // we will now return to the request that sent us here in the first place\r",
							"        break;\r",
							"    }\r",
							"    case 401:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid Embedded_uua_clientid or Embedded_uua_clientsecret: '+ responseBody);\r",
							"        postman.setNextRequest(null);\r",
							"        break;\r",
							"    }\r",
							"    default:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Response Body: '+ responseBody);\r",
							"        if (pm.variables.get(\"recovery\") === pm.info.requestName)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Already attempted to get a valid request. Will now quit');\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Will make one more attempt to get a new accesstoken');\r",
							"            pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }; //end if \r",
							"        break;\r",
							"    }\r",
							"}; // end swtich\r",
							"\r",
							"const errors=pm.variables.get(\"ContinuousErrors\");\r",
							"const maxerrors=3;  // maxerrors needs to be at least 2, otherwise valid workflows may be able to correctly recover from an invalid access tokens or invalid csrf-tokens\r",
							"\r",
							"if (errors >= maxerrors)\r",
							"{\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting');\r",
							"    pm.variables.set(\"ContinuousErrors\",0); \r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"else if (errors >= 2)\r",
							"{\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected');\r",
							"    // a valid accesstoken may have been obtained, but the request where it came from could have failed, hence the need to trap for a continous loop of errors here\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{Embedded_uua_clientsecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{Embedded_uua_clientid}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{Embedded_uua_url_FQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{Embedded_uua_url_FQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}