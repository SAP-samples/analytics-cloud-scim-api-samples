{
	"info": {
		"_postman_id": "5fe3905c-b2c1-44b5-906a-1a1b7f602e65",
		"name": "Embedded 734-Fj-Update System Configuration",
		"description": "# Provided 'as is'\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\n# User guide\n\n[https://d.dam.sap.com/a/kv3cXuB](https://d.dam.sap.com/a/kv3cXuB)\n\n# Blog (for Q&A)\n\n[https://blogs.sap.com/2021/05/28/sap-analytics-cloud-scim-api-best-practices-and-sample-scripts/](https://blogs.sap.com/2021/05/28/sap-analytics-cloud-scim-api-best-practices-and-sample-scripts/)\n\n# About\n\nScript version 0.6.5\n\nSample scripts created by Matthew Shaw, SAP. [https://people.sap.com/matthew.shaw/#content:blogposts](https://people.sap.com/matthew.shaw/#content:blogposts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UPDATE System Configuration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Updating System Configuration');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"\r",
							"\r",
							"const SystemConfigSettings_from_file=pm.iterationData.get(\"file_SystemConfig\");\r",
							"const Validated_SystemConfigSettings = [];\r",
							"\r",
							"SystemConfigSettings_from_file.forEach( myfunction_ValidateEntry );\r",
							"\r",
							"function myfunction_ValidateEntry(entry)\r",
							"{\r",
							"    if (entry.value===\"\")\r",
							"    {\r",
							"        //entry.value='__undefined';\r",
							"        //Validated_SystemConfigSettings.push(entry);\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Entry '+entry.name+' does not have a value. It is not currently possible to set this value to be \\'undefined\\'. This entry will not form part of the system configuration update');\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        Validated_SystemConfigSettings.push(entry);\r",
							"    } // end if\r",
							"}; // end function\r",
							"\r",
							"\r",
							"//SystemConfig=JSON.stringify(Validated_SystemConfigSettings).replace(/\"__undefined\"/g, 'undefined');\r",
							"SystemConfig=JSON.stringify(Validated_SystemConfigSettings);\r",
							"pm.variables.set(\"SetTenantSystemConfig\",(SystemConfig));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Submit System Configuration Update\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([202,401,403]);\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 202:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': System Configuration update accepted');\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"    pm.variables.set(\"logId\",readbody.logId)\r",
							"    postman.setNextRequest();\r",
							"    break;\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"SetTenantSystemConfig\": {{SetTenantSystemConfig}}\r\n}"
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}/config",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}",
						"config"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm System Configuration Update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading Log');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"System Configuration Updated\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200)  { pm.expect(pm.response.json().status).to.be.oneOf([\"IN PROGRESS\",\"SUCCESS\"]) };\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"    } );\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"\r",
							"    if (readbody.status === \"IN PROGRESS\")\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Request still in progress... waiting 30 seconds before next refresh');\r",
							"        setTimeout(()=> {},30000);\r",
							"        postman.setNextRequest(pm.info.requestName);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':  status: '+readbody.status);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':   start: '+readbody.start);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':  target: '+readbody.target);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': message: '+readbody.message);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':    stop: '+readbody.stop);\r",
							"        if (readbody.status===\"SUCCESS\")\r",
							"        {\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+': System Configuration was successfully updated');\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': System Configuration could not be updated. Try again later and contact SAP Product Support if the issue persists. Use component LOD-ANA-ADM when logging your SAP Product Support incident');\r",
							"            \r",
							"        };\r",
							"        postman.setNextRequest(null);\r",
							"    }\r",
							"    break;\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}/logs/{{logId}}",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}",
						"logs",
						"{{logId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET tenantaccesstoken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Getting tenant access token');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else  // we are on a Cloud Foundary Platform\r",
							"{\r",
							"   pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 200:\r",
							"    {\r",
							"        const jsonData = JSON.parse(responseBody);\r",
							"        pm.environment.set(\"tenantaccesstoken\", jsonData.access_token);  // setting the tenantaccesstoken so its re-used for all subsequent requests\r",
							"        postman.setNextRequest(pm.variables.get(\"recovery\"));      // we will now return to the request that sent us here in the first place\r",
							"        break;\r",
							"    }\r",
							"    case 401:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid Embedded_uua_clientid or Embedded_uua_clientsecret: '+ responseBody);\r",
							"        postman.setNextRequest(null);\r",
							"        break;\r",
							"    }\r",
							"    default:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Response Body: '+ responseBody);\r",
							"        if (pm.variables.get(\"recovery\") === pm.info.requestName)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Already attempted to get a valid request. Will now quit');\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Will make one more attempt to get a new accesstoken');\r",
							"            pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }; //end if \r",
							"        break;\r",
							"    }\r",
							"}; // end swtich\r",
							"\r",
							"const errors=pm.variables.get(\"ContinuousErrors\");\r",
							"const maxerrors=3;  // maxerrors needs to be at least 2, otherwise valid workflows may be able to correctly recover from an invalid access tokens or invalid csrf-tokens\r",
							"\r",
							"if (errors >= maxerrors)\r",
							"{\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting');\r",
							"    pm.variables.set(\"ContinuousErrors\",0); \r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"else if (errors >= 2)\r",
							"{\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected');\r",
							"    // a valid accesstoken may have been obtained, but the request where it came from could have failed, hence the need to trap for a continous loop of errors here\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{Embedded_uua_clientsecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{Embedded_uua_clientid}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{Embedded_uua_url_FQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{Embedded_uua_url_FQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}