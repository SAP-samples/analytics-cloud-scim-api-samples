{
	"info": {
		"_postman_id": "fc999e2c-8190-4b63-a109-d798196b1f6c",
		"name": "Embedded 721-E-SCIM Express setup (based on this Environment)",
		"description": "# Provided 'as is'\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\n# User guide\n\n[https://d.dam.sap.com/a/Wg2pPhA](https://d.dam.sap.com/a/Wg2pPhA/)\n\n# Blog (for Q&A)\n\n[https://blogs.sap.com/2022/04/07/sap-analytics-cloud-embedded-edition-best-practices-sample-scripts-for-administration/](https://blogs.sap.com/2022/04/07/sap-analytics-cloud-embedded-edition-best-practices-sample-scripts-for-administration/)\n\n# About\n\nScript version 0.7.5\n\nSample scripts created by Matthew Shaw, SAP. [https://people.sap.com/matthew.shaw/#content:blogposts](https://people.sap.com/matthew.shaw/#content:blogposts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9591952"
	},
	"item": [
		{
			"name": "READ System Configuration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading System Configuration');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"READ System Configuration\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().inconsistent).to.equal(false) };\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"        pm.variables.set(\"ContinuousErrors\",0);\r",
							"        // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"        pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"        const readbody    = JSON.parse(responseBody);\r",
							"        const inconsistent=readbody.inconsistent;\r",
							"        if (inconsistent)\r",
							"        {\r",
							"            console.error(\"Inconsistent : \"+inconsistent+'   Reason : '+readbody.inconsistentReason);\r",
							"            console.error(\"Aborting. Cannot update when the Service has this status. Please use sample script 731 to reset the inconsistent status\");\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            // read the ContentNamespace and determine if it needs updating or not.\r",
							"            const ContentPackage=readbody.tenantSystemConfig.find( element => element.name === 'CONTENT_PACKAGE').value;\r",
							"            const IgnoreTeamNamspace=readbody.tenantSystemConfig.find( element => element.name === 'IGNORE_TEAM_NAMESPACE').value;\r",
							"\r",
							"            if (ContentPackage != pm.environment.get(\"ContentNamespace\") || (IgnoreTeamNamspace==='false'))\r",
							"            {\r",
							"                pm.variables.set(\"ContentPackage_Or_IgnoreTeamNamespace_Needs_Updating\",true);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.variables.set(\"ContentPackage_Or_IgnoreTeamNamespace_Needs_Updating\",false);\r",
							"            }; // end if ContentPackage\r",
							"\r",
							"            // read the current OAuth clients and detemrine if the one named in the Postman environment exists in the SAC tenant or not.\r",
							"            const oauthClients=readbody.oauthClients;\r",
							"            let   OAuthClientName=pm.variables.get(\"Embedded_OAuthClientName\");\r",
							"            if (!OAuthClientName) { OAuthClientName=\"MyOAuthClient\"; pm.environment.set(\"Embedded_OAuthClientName\",OAuthClientName)}\r",
							"            if (oauthClients.find( OAuthClient => OAuthClient.name === OAuthClientName))\r",
							"            {\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': OAuth Client already exists');\r",
							"\r",
							"                if (pm.variables.get(\"ContentPackage_Or_IgnoreTeamNamespace_Needs_Updating\"))\r",
							"                {\r",
							"                    postman.setNextRequest(\"UPDATE Settings for Content Namespace and Ignore Team Namespace\");\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    console.info(pm.info.requestName+' '+pm.info.eventName+': Settings for Content Namespace already matches the name defined in this Postman Environment. Ignore Team Namespace is already true')\r",
							"                    postman.setNextRequest(\"UPDATE Postman Environment\");\r",
							"                };\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': OAuth Client with name '+pm.variables.get(\"Embedded_OAuthClientName\")+\" does not yet exist\");\r",
							"                postman.setNextRequest();\r",
							"            }; // end if \r",
							"     \r",
							"\r",
							"        }; // end if\r",
							"        break;\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE OAuth Client",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Creating OAuth client, as defined in this Postman environment, with name: '+ pm.variables.get(\"Embedded_OAuthClientName\") );\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"\r",
							"const apiRoles = [];\r",
							"\r",
							"// the SCIM role is needed to manage users and teams in SAC. \r",
							"apiRoles.push(\"PROFILE:sap.epm:SCIM_Public_API\");\r",
							"\r",
							"// the Story Listing and Modeling APIs are not needed for SCIM purposes\r",
							"// if you decide you'd like these roles then feel free to uncomment the next two lines to include them when the OAuth client is created.\r",
							"// apiRoles.push(\"PROFILE:sap.epm:Story_Listing_Public_API\");\r",
							"// apiRoles.push(\"PROFILE:sap.epm:Modeling_Public_API\");\r",
							"pm.variables.set(\"apiRoles\",JSON.stringify(apiRoles));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Submit OAuth Client Creation\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([202,401,403]);\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 202:\r",
							"    {\r",
							"        pm.variables.set(\"ContinuousErrors\",0);\r",
							"        // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"        pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': OAuth client creation request accepted');\r",
							"        const readbody    = JSON.parse(responseBody);\r",
							"        pm.variables.set(\"logId\",readbody.logId)\r",
							"        postman.setNextRequest();\r",
							"        break;\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"AddOAuthClient\": [\r\n        {\r\n            \"name\": \"{{Embedded_OAuthClientName}}\",\r\n            \"apiAccessEnabled\": \"true\",\r\n            \"apiRoles\": {{apiRoles}}\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}/config",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}",
						"config"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm OAuth Client creation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading Log');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"OAuth Client Created\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200)  { pm.expect(pm.response.json().status).to.be.oneOf([\"IN PROGRESS\",\"SUCCESS\"]) };\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"    } );\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"\r",
							"    if (readbody.status === \"IN PROGRESS\")\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Request still in progress... waiting 30 seconds before next refresh');\r",
							"        setTimeout(()=> {},30000);\r",
							"        postman.setNextRequest(pm.info.requestName);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':  status: '+readbody.status);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':   start: '+readbody.start);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':  target: '+readbody.target);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': message: '+readbody.message);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':    stop: '+readbody.stop);\r",
							"        \r",
							"\r",
							"        if (readbody.status===\"SUCCESS\")\r",
							"        {\r",
							"            if (pm.variables.get(\"ContentPackage_Or_IgnoreTeamNamespace_Needs_Updating\"))\r",
							"            {\r",
							"                postman.setNextRequest();\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                postman.setNextRequest(\"UPDATE Postman Environment\");\r",
							"            }\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': OAuth creation was not successful and therefore it is not possible to update the Postman Environment with the correct details. This means you will not be able to run other sample scripts to create and manage users. Try again later and contact SAP Product Support if the issue persists. Use component LOD-ANA-OEM-CP when logging your SAP Product Support incident');\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    break;\r",
							"\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}/logs/{{logId}}",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}",
						"logs",
						"{{logId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE Settings for Content Namespace and Ignore Team Namespace",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Updating Settings for Content Namespace, as defined in this Postman environment, to be: '+ pm.environment.get(\"ContentNamespace\")+'. Also setting Ignore Team Namespace to true, if not already set' );\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"pm.variables.set(\"ContentPackage\",pm.environment.get(\"ContentNamespace\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Submit Settings for Content Namespace and Ignore Team Namespace Update\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([202,401,403]);\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 202:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Content Namepspace and Ignore Team Namespace settings update accepted');\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"    pm.variables.set(\"logId\",readbody.logId)\r",
							"    postman.setNextRequest();\r",
							"    break;\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"SetTenantSystemConfig\": [\r\n        {\r\n            \"name\": \"CONTENT_PACKAGE\",\r\n            \"value\": \"{{ContentPackage}}\"\r\n        },\r\n        {\r\n            \"name\": \"IGNORE_TEAM_NAMESPACE\",\r\n            \"value\": \"true\"\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}/config",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}",
						"config"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm Settings for Content Namespace and Ignore Team Namespace Update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading Log');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Settings for Content Namespace and Ignore Team Namespace Updated\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200)  { pm.expect(pm.response.json().status).to.be.oneOf([\"IN PROGRESS\",\"SUCCESS\"]) };\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"    } );\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"\r",
							"    if (readbody.status === \"IN PROGRESS\")\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Request still in progress... waiting 30 seconds before next refresh');\r",
							"        setTimeout(()=> {},30000);\r",
							"        postman.setNextRequest(pm.info.requestName);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':  status: '+readbody.status);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':   start: '+readbody.start);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':  target: '+readbody.target);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': message: '+readbody.message);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':    stop: '+readbody.stop);\r",
							"        if (readbody.status===\"SUCCESS\")\r",
							"        {\r",
							"            postman.setNextRequest();\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Settings for Content Namespace and Ignore Team Namespace could not be updated. Aborting update of Postman Environment. Try again later and contact SAP Product Support if the issue persists. Use component LOD-ANA-OEM-CP when logging your SAP Product Support incident');\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"    }\r",
							"    break;\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}/logs/{{logId}}",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}",
						"logs",
						"{{logId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE Postman Environment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading System Configuration');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"UPDATE Postman Environment\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().inconsistent).to.equal(false) };\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"    const inconsistent=readbody.inconsistent;\r",
							"    if (inconsistent)\r",
							"    {\r",
							"        console.error(\"Inconsistent : \"+inconsistent+'   Reason : '+readbody.inconsistentReason);\r",
							"        console.error(\"Aborting. Cannot update when the Service has this status. Please use sample script 731 to reset the inconsistent status\");\r",
							"        postman.setNextRequest(null);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"\r",
							"        pm.environment.set(\"SACserviceFQDN\",readbody.publicFqdn);\r",
							"        pm.environment.set(\"SACtokenFQDN\",readbody.tokenUrl.substr(0,readbody.tokenUrl.indexOf(\"/\")));\r",
							"        pm.environment.set(\"ContentNamespace\",readbody.tenantSystemConfig.find( element => element.name === 'CONTENT_PACKAGE').value);\r",
							"\r",
							"        const oauthClients=readbody.oauthClients;\r",
							"        const ThisOAuthClient=oauthClients.find( OAuthClient => OAuthClient.name === pm.variables.get(\"Embedded_OAuthClientName\"));\r",
							"\r",
							"                \r",
							"        if (ThisOAuthClient)\r",
							"        {\r",
							"            pm.environment.set(\"Username\",ThisOAuthClient.clientId);\r",
							"            pm.environment.set(\"Password\",ThisOAuthClient.clientSecret);\r",
							"        \r",
							"            if (!readbody.customIdp.customIdpEnabled)\r",
							"            {\r",
							"                pm.environment.set(\"SAMLSSO\",'default');\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                switch (readbody.customIdp.nameIdColumn)\r",
							"                {\r",
							"                    case 'userid': {pm.environment.set(\"SAMLSSO\",'userid'); break}\r",
							"                    case 'email': {pm.environment.set(\"SAMLSSO\",'email'); break}\r",
							"                    default:  {pm.environment.set(\"SAMLSSO\",'custom'); break}\r",
							"                }\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SAMLSSO setting now assigned to this Postman environment: '+pm.environment.get(\"SAMLSSO\"));\r",
							"            };\r",
							"\r",
							"\r",
							"            \r",
							"\r",
							"            // checking TimeZone variables are set\r",
							"\r",
							"            let timezone_hours   = parseInt(pm.variables.get(\"TimeZoneHours\"));\r",
							"            let timezone_minutes = parseInt(pm.variables.get(\"TimeZoneMinutes\"));\r",
							"            let timezone_text    = pm.variables.get(\"TimeZoneDescription\");\r",
							"\r",
							"            if ((timezone_hours   === undefined)|| (!Number.isInteger(timezone_hours  )))\r",
							"            {\r",
							"                timezone_hours   =0;\r",
							"                pm.environment.set(\"TimeZoneHours\",timezone_hours);\r",
							"                console.warn(pm.info.requestName+' '+pm.info.eventName+': TimeZoneHours         : Undefined! Variable set as \\'0\\' for you. Please update the environment variable TimeZoneHours to be a number between -23 and 23');\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': TimeZoneHours         : '+timezone_hours);\r",
							"            };\r",
							"            \r",
							"            if ((timezone_minutes === undefined)|| (!Number.isInteger(timezone_minutes)))  \r",
							"            { \r",
							"                timezone_minutes =0;\r",
							"                pm.environment.set(\"TimeZoneMinutes\",timezone_minutes);\r",
							"                console.warn(pm.info.requestName+' '+pm.info.eventName+': TimeZoneMinutes       : Undefined! Variable set as \\'0\\' for you. Please update the environment variable TimeZoneMinutes to be -30, 0 or 30');\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': TimeZoneMinutes       : '+timezone_minutes);\r",
							"            };\r",
							"\r",
							"            if (timezone_text     === undefined) \r",
							"            { \r",
							"                timezone_text    ='UTC';\r",
							"                pm.environment.set(\"TimeZoneDescription\",timezone_text);\r",
							"                console.warn(pm.info.requestName+' '+pm.info.eventName+': TimeZoneDescription   : Undefined! Variable set as \\'UTC\\' for you. Please update the environment variable TimeZoneDescription to be the description of your timezone');\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': TimeZoneDescription   : '+timezone_text);\r",
							"            };\r",
							"\r",
							"\r",
							"            // checking SCIM_NewUserDefault varaibles are set\r",
							"\r",
							"            const preferredlanguage                 =pm.environment.get(\"SCIM_NewUserDefault_preferredlanguage\");  // possible values: 'ar', 'bg', 'zh-CN', 'zh-TW', 'hr', 'ca', 'cs', 'cy', 'nl', 'da', 'en', 'en-GB', 'fi', 'fr', 'fr-CA', 'de', 'de-CH', 'el', 'he', 'hi', 'hu', 'id', 'it', 'ja', 'ko', 'ms', 'no', 'pl', 'pt', 'pt-PT', 'ro', 'ru', 'sh', 'sk', 'sl', 'es', 'es-MX', 'sv', 'th', 'tr', 'uk', 'vi', 'en-US-sappsd' and possibly more will be added over time!\r",
							"\r",
							"            const active                            =pm.environment.get(\"SCIM_NewUserDefault_active\"); // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"            const dataaccesslanguage                =pm.environment.get(\"SCIM_NewUserDefault_dataaccesslanguage\"); // possible values: 'zz' (default), 'af', 'ar', 'bg',  ... many more as shown above in preferredlanguage.\r",
							"            const dateformatting                    =pm.environment.get(\"SCIM_NewUserDefault_dateformatting\");     // possible values include: 'MMM d, yyyy', 'dd/MM/yyyy', 'MM.dd.yyyy', ... many more!\r",
							"            const timeformatting                    =pm.environment.get(\"SCIM_NewUserDefault_timeformatting\");     // possible values include: 'H:mm:ss' (24H), 'h:mm:ss A' (12H)\r",
							"            const numberformatting                  =pm.environment.get(\"SCIM_NewUserDefault_numberformatting\");   // possible values include: '1,234.56', '1.234,56', '1 234,56'\r",
							"            const cleanupnotificationsnumberofdays  =pm.environment.get(\"SCIM_NewUserDefault_cleanupnotificationsnumberofdays\"); // possible values: 0, 1, 2, etc..\r",
							"            const systemnotificationsemailoptin     =pm.environment.get(\"SCIM_NewUserDefault_systemnotificationsemailoptin\"); // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"            const marketingemailoptin               =pm.environment.get(\"SCIM_NewUserDefault_marketingemailoptin\");                    // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"\r",
							"\r",
							"            console.log(pm.info.requestName+' '+pm.info.eventName+': New users will be created with the following values for their respective properties:');\r",
							"            if (preferredlanguage)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_preferredlanguage set as                  : '+ preferredlanguage);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_preferredlanguage\", \"en\");    // possible values: 'ar', 'bg', 'zh-CN', 'zh-TW', 'hr', 'ca', 'cs', 'cy', 'nl', 'da', 'en', 'en-GB', 'fi', 'fr', 'fr-CA', 'de', 'de-CH', 'el', 'he', 'hi', 'hu', 'id', 'it', 'ja', 'ko', 'ms', 'no', 'pl', 'pt', 'pt-PT', 'ro', 'ru', 'sh', 'sk', 'sl', 'es', 'es-MX', 'sv', 'th', 'tr', 'uk', 'vi', 'en-US-sappsd' and possibly more will be added over time!\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_preferredlanguage                        : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_preferredlanguage\")+'\\'');\r",
							"\r",
							"            };\r",
							"\r",
							"            if (active)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_active set as                             : '+ active);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_active\", \"true\");    // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_active                                   : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_active\")+'\\''); \r",
							"            };\r",
							"\r",
							"\r",
							"            if (dataaccesslanguage)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_dataaccesslanguage set as                 : '+ dataaccesslanguage);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_dataaccesslanguage\", \"en\");    // possible values: 'zz' (default), 'af', 'ar', 'bg',  ... many more as shown above in preferredlanguage.\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_dataaccesslanguage                       : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_dataaccesslanguage\")+'\\''); \r",
							"            };\r",
							"\r",
							"\r",
							"            if (dateformatting)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_dateformatting set as                     : '+ dateformatting);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_dateformatting\", \"MMM d, yyyy\");    // possible values include: 'MMM d, yyyy', 'dd/MM/yyyy', 'MM.dd.yyyy', ... many more!\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_dateformatting                           : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_dateformatting\")+'\\''); \r",
							"            };\r",
							"\r",
							"\r",
							"            if (timeformatting)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_timeformatting set as                     : '+ timeformatting);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_timeformatting\", \"H:mm:ss\");    // possible values include: 'H:mm:ss' (24H), 'h:mm:ss A' (12H)\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_timeformatting                           : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_timeformatting\")+'\\''); \r",
							"            };\r",
							"\r",
							"\r",
							"            if (numberformatting)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_numberformatting set as                   : '+ numberformatting);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_numberformatting\", \"1,234.56\");    // possible values include: 'MMM d, yyyy', 'dd/MM/yyyy', 'MM.dd.yyyy', ... many more!\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_numberformatting                         : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_numberformatting\")+'\\''); \r",
							"            };\r",
							"\r",
							"            if (cleanupnotificationsnumberofdays)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_cleanupnotificationsnumberofdays set as   : '+ cleanupnotificationsnumberofdays);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_cleanupnotificationsnumberofdays\", \"0\");    // possible values include: 'MMM d, yyyy', 'dd/MM/yyyy', 'MM.dd.yyyy', ... many more!\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_cleanupnotificationsnumberofdays         : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_cleanupnotificationsnumberofdays\")+'\\''); \r",
							"            };\r",
							"        \r",
							"\r",
							"            if (systemnotificationsemailoptin)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_systemnotificationsemailoptin set as      : '+ systemnotificationsemailoptin);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_systemnotificationsemailoptin\", \"true\");    // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_systemnotificationsemailoptin            : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_systemnotificationsemailoptin\")+'\\''); \r",
							"            };\r",
							"\r",
							"\r",
							"            if (marketingemailoptin)\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_marketingemailoptin set as                : '+ marketingemailoptin);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.environment.set(\"SCIM_NewUserDefault_marketingemailoptin\", \"false\");    // possible values: 'true' or 'false' are valid, unlike 'TRUE' or 'FALSE'\r",
							"                console.info(pm.info.requestName+' '+pm.info.eventName+': SCIM_NewUserDefault_marketingemailoptin                      : Undefined! Variable set as \\''+ pm.environment.get(\"SCIM_NewUserDefault_marketingemailoptin\")+'\\''); \r",
							"            };\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+': This Postman Environment has been updated (SACserviceFQDN,SACtokenFQDN,Username,Password,SAMLSSO). You are now ready to use the other sample scripts that create users and teams etc. Use sample script \\'001-Test-Es-Tests Single Environment Setup\\' to validate the SCIM API endpoints are working as expected');\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"           console.error(pm.info.requestName+' '+pm.info.eventName+': OAuth Client with name '+pm.variables.get(\"Embedded_OAuthClientName\")+\" does not exist!\")\r",
							"        }; // end if \r",
							"        postman.setNextRequest(null);\r",
							"    };\r",
							"    break;\r",
							"\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET tenantaccesstoken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Getting tenant access token');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else  // we are on a Cloud Foundary Platform\r",
							"{\r",
							"   pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 200:\r",
							"    {\r",
							"        const jsonData = JSON.parse(responseBody);\r",
							"        pm.environment.set(\"tenantaccesstoken\", jsonData.access_token);  // setting the tenantaccesstoken so its re-used for all subsequent requests\r",
							"        postman.setNextRequest(pm.variables.get(\"recovery\"));      // we will now return to the request that sent us here in the first place\r",
							"        break;\r",
							"    }\r",
							"    case 401:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid Embedded_uua_clientid or Embedded_uua_clientsecret: '+ responseBody);\r",
							"        postman.setNextRequest(null);\r",
							"        break;\r",
							"    }\r",
							"    default:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Response Body: '+ responseBody);\r",
							"        if (pm.variables.get(\"recovery\") === pm.info.requestName)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Already attempted to get a valid request. Will now quit');\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Will make one more attempt to get a new accesstoken');\r",
							"            pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }; //end if \r",
							"        break;\r",
							"    }\r",
							"}; // end swtich\r",
							"\r",
							"const errors=pm.variables.get(\"ContinuousErrors\");\r",
							"const maxerrors=3;  // maxerrors needs to be at least 2, otherwise valid workflows may be able to correctly recover from an invalid access tokens or invalid csrf-tokens\r",
							"\r",
							"if (errors >= maxerrors)\r",
							"{\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting');\r",
							"    pm.variables.set(\"ContinuousErrors\",0); \r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"else if (errors >= 2)\r",
							"{\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected');\r",
							"    // a valid accesstoken may have been obtained, but the request where it came from could have failed, hence the need to trap for a continous loop of errors here\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{Embedded_uua_clientsecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{Embedded_uua_clientid}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{Embedded_uua_url_FQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{Embedded_uua_url_FQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}