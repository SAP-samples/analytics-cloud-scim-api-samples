{
	"info": {
		"_postman_id": "14005e28-cec2-47db-addb-f4682c1684de",
		"name": "Embedded 743-Fj-Add Live Connection",
		"description": "# Provided 'as is'\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\n# User guide\n\n[https://d.dam.sap.com/a/Wg2pPhA/](https://d.dam.sap.com/a/Wg2pPhA/)\n\n# Blog (for Q&A)\n\n[https://blogs.sap.com/2022/04/07/sap-analytics-cloud-embedded-edition-best-practices-sample-scripts-for-administration/](https://blogs.sap.com/2022/04/07/sap-analytics-cloud-embedded-edition-best-practices-sample-scripts-for-administration/)\n\n# About\n\nScript version 0.7.3\n\nSample scripts created by Matthew Shaw, SAP. [https://people.sap.com/matthew.shaw/#content:blogposts](https://people.sap.com/matthew.shaw/#content:blogposts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "READ System Configuration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading System Configuration');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"READ System Configuration\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"        if (pm.response.code === 200) { pm.expect(pm.response.json().inconsistent).to.equal(false) };\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"        pm.variables.set(\"ContinuousErrors\",0);\r",
							"        // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"        pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"        const readbody    = JSON.parse(responseBody);\r",
							"        const inconsistent=readbody.inconsistent;\r",
							"\r",
							"        if (inconsistent)\r",
							"        {\r",
							"            console.error(\"Inconsistent : \"+inconsistent+'   Reason : '+readbody.inconsistentReason);\r",
							"            console.error(\"Aborting. Cannot update when the Service has this status. Please use sample script 731 to reset the inconsistent status\");\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            const LiveConnections=readbody.liveConnections;\r",
							"            const LiveConnectionFileArray=pm.iterationData.get(\"file_liveconnection\");\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnectionFileArray',LiveConnectionFileArray);\r",
							"            const LiveConnection_type                   =(LiveConnectionFileArray.some( entry => entry.name==='type') ? LiveConnectionFileArray.find( entry => entry.name==='type').value : undefined) ;\r",
							"            const LiveConnection_name                   =(LiveConnectionFileArray.some( entry => entry.name==='name') ? LiveConnectionFileArray.find( entry => entry.name==='name').value : undefined) ;\r",
							"            \r",
							"            const LiveConnection_description            =(LiveConnectionFileArray.some( entry => entry.name==='description') ? LiveConnectionFileArray.find( entry => entry.name==='description').value : undefined) ;\r",
							"            const LiveConnection_host                   =(LiveConnectionFileArray.some( entry => entry.name==='host') ? LiveConnectionFileArray.find( entry => entry.name==='host').value : undefined) ;\r",
							"            const LiveConnection_port                   =(LiveConnectionFileArray.some( entry => entry.name==='port') ? LiveConnectionFileArray.find( entry => entry.name==='port').value : undefined) ;\r",
							"            const LiveConnection_language               =(LiveConnectionFileArray.some( entry => entry.name==='language') ? LiveConnectionFileArray.find( entry => entry.name==='language').value : undefined) ;\r",
							"            const LiveConnection_authenticationMethod   =(LiveConnectionFileArray.some( entry => entry.name==='authenticationMethod') ? LiveConnectionFileArray.find( entry => entry.name==='authenticationMethod').value : undefined) ;\r",
							"            const LiveConnection_username               =(LiveConnectionFileArray.some( entry => entry.name==='userName') ? LiveConnectionFileArray.find( entry => entry.name==='userName').value : undefined) ;\r",
							"            const LiveConnection_password               =(LiveConnectionFileArray.some( entry => entry.name==='password') ? LiveConnectionFileArray.find( entry => entry.name==='password').value : undefined) ;\r",
							"            const LiveConnection_isSaveCredential       =(LiveConnectionFileArray.some( entry => entry.name==='isSaveCredential') ? LiveConnectionFileArray.find( entry => entry.name==='isSaveCredential').value : undefined) ;\r",
							"            const LiveConnection_contextPath            =(LiveConnectionFileArray.some( entry => entry.name==='contextPath') ? LiveConnectionFileArray.find( entry => entry.name==='contextPath').value : undefined) ;\r",
							"            const LiveConnection_proxyType              =(LiveConnectionFileArray.some( entry => entry.name==='proxyType') ? LiveConnectionFileArray.find( entry => entry.name==='proxyType').value : undefined) ;\r",
							"            const LiveConnection_proxyHost              =(LiveConnectionFileArray.some( entry => entry.name==='proxyHost') ? LiveConnectionFileArray.find( entry => entry.name==='proxyHost').value : undefined) ;\r",
							"            const LiveConnection_proxyPort              =(LiveConnectionFileArray.some( entry => entry.name==='proxyPort') ? LiveConnectionFileArray.find( entry => entry.name==='proxyPort').value : undefined) ;\r",
							"            const LiveConnection_locationId             =(LiveConnectionFileArray.some( entry => entry.name==='locationId') ? LiveConnectionFileArray.find( entry => entry.name==='locationId').value : undefined) ;\r",
							"\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_type',LiveConnection_type);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_name',LiveConnection_name);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_description',LiveConnection_description);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_host',LiveConnection_host);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_port',LiveConnection_port);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_language',LiveConnection_language);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_authenticationMethod',LiveConnection_authenticationMethod);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_username',LiveConnection_username);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_password',LiveConnection_password);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_isSaveCredential',LiveConnection_isSaveCredential);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_contextPath',LiveConnection_contextPath);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_proxyType',LiveConnection_proxyType);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_proxyHost',LiveConnection_proxyHost);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_proxyPort',LiveConnection_proxyPort);\r",
							"            //console.log(pm.info.requestName+' '+pm.info.eventName+': LiveConnection_locationId',LiveConnection_locationId);\r",
							"\r",
							"        \r",
							"            if ((LiveConnections.find( TrustedIdp => TrustedIdp.name === LiveConnection_name)))\r",
							"            {\r",
							"                console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! Live Connection with name '+LiveConnection_name+' already exists');\r",
							"                postman.setNextRequest(null);\r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                console.log(pm.info.requestName+' '+pm.info.eventName+': Live Connection with name '+LiveConnection_name+\" does not yet exist\");\r",
							"                \r",
							"                // we shall set the next request to be the next request, unless a test fails. If a test fails we'll set the NextRequest to null and then abort.\r",
							"                postman.setNextRequest();\r",
							"\r",
							"\r",
							"                // check the supported 'type'\r",
							"                const supported_types_array=['HANA','EXTENDEDHANA'];\r",
							"                const type_supported = supported_types_array.includes(LiveConnection_type);\r",
							"                if (!type_supported)\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! type is not valid. It must be \\'HANA\\' or \\'EXTENDEDHANA\\': '+LiveConnection_type);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"\r",
							"                // check the 'name' is no more than 10 characters in length and 'name' exists\r",
							"                const name_length_supported = ((LiveConnection_name != undefined) && (LiveConnection_name.length<=10));\r",
							"                //console.log(pm.info.requestName+' '+pm.info.eventName+': name_length_supported ',name_length_supported);\r",
							"                if (!name_length_supported)\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! name is not valid. It must exist and not exceed 10 characters: '+LiveConnection_name);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"\r",
							"                if ( LiveConnection_host=== undefined)\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! host is not valid. It must exist: '+LiveConnection_host);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"\r",
							"                // check the authenticationMethod is supported\r",
							"                const supported_authenticationMethod_array=['BASIC','SAML'];\r",
							"                const authenticationMethod_supported = supported_authenticationMethod_array.includes(LiveConnection_authenticationMethod);\r",
							"                //console.log(pm.info.requestName+' '+pm.info.eventName+': authenticationMethod_supported ',authenticationMethod_supported);\r",
							"                if (!authenticationMethod_supported)\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! authenticationMethod is not valid. It must be \\'BASIC\\' or \\'SAML\\': '+LiveConnection_authenticationMethod);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"\r",
							"                if ( (LiveConnection_authenticationMethod==='BASIC') && (LiveConnection_username=== undefined))\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! username is not valid. It must exist when authenticationMethod is BASIC: '+LiveConnection_username);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"\r",
							"                if ( (LiveConnection_authenticationMethod==='BASIC') && (LiveConnection_password=== undefined))\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! password is not valid. It must exist when authenticationMethod is BASIC: '+LiveConnection_password);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"\r",
							"                if ( (LiveConnection_authenticationMethod==='BASIC') && (LiveConnection_type==='HANA'))\r",
							"                {\r",
							"                    console.warn(pm.info.requestName+' '+pm.info.eventName+': authenticationMethod is BASIC with type HANA: Only SAML is supported, may result in an error complaining of username can not be blank');\r",
							"                };\r",
							"\r",
							"                // check proxyType is supported, but its only needed if type = \"EXTENDEDHANA\"\r",
							"                const supported_proxyType_array=['default','internet','premise'];\r",
							"                const proxyType_supported = supported_proxyType_array.includes(LiveConnection_proxyType);\r",
							"                //console.log(pm.info.requestName+' '+pm.info.eventName+': proxyType_supported ',proxyType_supported);\r",
							"                if (type_supported && LiveConnection_type==='EXTENDEDHANA' && !proxyType_supported )\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! proxyType is not valid. It must exist when type=\\'EXTENDEDHANA\\' and be \\'default\\', \\'internet\\' or \\'premise\\': '+LiveConnection_proxyType);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"\r",
							"                // check proxyHost is supported, but its only needed if type = \"EXTENDEDHANA\"\r",
							"                if (proxyType_supported && LiveConnection_proxyType==='premise' && LiveConnection_proxyHost===undefined)\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! proxyHost is not valid. It must exist when proxyType=\\'premise\\': '+LiveConnection_proxyHost);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"\r",
							"                // check proxyPort is supported, but its only needed if type = \"EXTENDEDHANA\"\r",
							"                if (proxyType_supported && LiveConnection_proxyType==='premise' && LiveConnection_proxyPort===undefined)\r",
							"                {\r",
							"                    console.error(pm.info.requestName+' '+pm.info.eventName+': Aborting! proxyPort is not valid. It must exist when proxyType=\\'premise\\': '+LiveConnection_proxyPort);\r",
							"                    postman.setNextRequest(null);\r",
							"                };\r",
							"                                \r",
							"            }; // end if \r",
							"        }; // end if\r",
							"\r",
							"        break;\r",
							"\r",
							"\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ADD Live Connection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"const LiveConnectionFileArray=pm.iterationData.get(\"file_liveconnection\"); // read in the array from the data file\r",
							"const LiveConnection_name =LiveConnectionFileArray.find( entry => entry.name==='name').value; // identify the entry called name and store its values in LiveConnection_name\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Adding Live Connection with name: '+ LiveConnection_name );\r",
							"\r",
							"// now we need to create an array from the above array so the name and value are pairs separated by \":\" (including the \" each side of the :)\r",
							"const Validated_LiveConnectionArray=LiveConnectionFileArray.map( entry => {return entry.name+'\":\"'+entry.value } );\r",
							"\r",
							"// now we need to tidy up the string version of this array by removing the character \\ throughout the string\r",
							"const LiveConnectionArrayString=JSON.stringify(Validated_LiveConnectionArray).replace(/\\\\/g, '');\r",
							"// now we need to remove the first and last character which are [ and ] respectively. These must be removed to ensure the request body is value\r",
							"const LiveConnectionArrayString_minus_brackets=LiveConnectionArrayString.substring(1,LiveConnectionArrayString.length-1);\r",
							"// finally we can set the string to be used in the request body\r",
							"pm.variables.set(\"LiveConnectionArray\",LiveConnectionArrayString_minus_brackets);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Submit Trusted IdP Addition\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([202,401,403]);\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 202:\r",
							"    {\r",
							"        pm.variables.set(\"ContinuousErrors\",0);\r",
							"        // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"        pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Live Connection addition request accepted');\r",
							"        const readbody    = JSON.parse(responseBody);\r",
							"        pm.variables.set(\"logId\",readbody.logId)\r",
							"        postman.setNextRequest();\r",
							"        break;\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"AddLiveConnection\": [\r\n        {\r\n            {{LiveConnectionArray}}\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}/config",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}",
						"config"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm Live Connection addition",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading Log');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Live Connection Added\", function ()\r",
							"    {\r",
							"        if (pm.response.code === 200)  { pm.expect(pm.response.json().status).to.be.oneOf([\"IN PROGRESS\",\"SUCCESS\"]) };\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"    } );\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new tenant access token');\r",
							"        postman.setNextRequest(\"GET tenantaccesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"\r",
							"    if (readbody.status === \"IN PROGRESS\")\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Request still in progress... waiting 30 seconds before next refresh');\r",
							"        setTimeout(()=> {},30000);\r",
							"        postman.setNextRequest(pm.info.requestName);\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':  status: '+readbody.status);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':   start: '+readbody.start);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':  target: '+readbody.target);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': message: '+readbody.message);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+':    stop: '+readbody.stop);\r",
							"        \r",
							"\r",
							"        if (readbody.status===\"SUCCESS\")\r",
							"        {\r",
							"            console.info(pm.info.requestName+' '+pm.info.eventName+': Live Connection addition was successful');\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Live Connection addition was not successful. Try again later and contact SAP Product Support if the issue persists. Use component LOD-ANA-OEM-CP when logging your SAP Product Support incident');\r",
							"        };\r",
							"        postman.setNextRequest(null);\r",
							"    }\r",
							"\r",
							"    break;\r",
							"\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tenantaccesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}/api/v1/tenant/{{Embedded_tenant_uuid}}/logs/{{logId}}",
					"protocol": "https",
					"host": [
						"{{Embedded_endpoints_sac_embedded_edition_service_config_FQDN}}"
					],
					"path": [
						"api",
						"v1",
						"tenant",
						"{{Embedded_tenant_uuid}}",
						"logs",
						"{{logId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET tenantaccesstoken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Getting tenant access token');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else  // we are on a Cloud Foundary Platform\r",
							"{\r",
							"   pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 200:\r",
							"    {\r",
							"        const jsonData = JSON.parse(responseBody);\r",
							"        pm.environment.set(\"tenantaccesstoken\", jsonData.access_token);  // setting the tenantaccesstoken so its re-used for all subsequent requests\r",
							"        postman.setNextRequest(pm.variables.get(\"recovery\"));      // we will now return to the request that sent us here in the first place\r",
							"        break;\r",
							"    }\r",
							"    case 401:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid Embedded_uua_clientid or Embedded_uua_clientsecret: '+ responseBody);\r",
							"        postman.setNextRequest(null);\r",
							"        break;\r",
							"    }\r",
							"    default:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Response Body: '+ responseBody);\r",
							"        if (pm.variables.get(\"recovery\") === pm.info.requestName)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Already attempted to get a valid request. Will now quit');\r",
							"            postman.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Will make one more attempt to get a new accesstoken');\r",
							"            pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"            postman.setNextRequest(pm.info.requestName);\r",
							"        }; //end if \r",
							"        break;\r",
							"    }\r",
							"}; // end swtich\r",
							"\r",
							"const errors=pm.variables.get(\"ContinuousErrors\");\r",
							"const maxerrors=3;  // maxerrors needs to be at least 2, otherwise valid workflows may be able to correctly recover from an invalid access tokens or invalid csrf-tokens\r",
							"\r",
							"if (errors >= maxerrors)\r",
							"{\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting');\r",
							"    pm.variables.set(\"ContinuousErrors\",0); \r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"else if (errors >= 2)\r",
							"{\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected');\r",
							"    // a valid accesstoken may have been obtained, but the request where it came from could have failed, hence the need to trap for a continous loop of errors here\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{Embedded_uua_clientsecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{Embedded_uua_clientid}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{Embedded_uua_url_FQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{Embedded_uua_url_FQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}