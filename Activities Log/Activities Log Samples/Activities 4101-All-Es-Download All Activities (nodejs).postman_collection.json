{
	"info": {
		"_postman_id": "fba17c0b-916b-49da-ab42-ac40604e07ba",
		"name": "Activities 4101-All-Es-Download All Activities (nodejs)",
		"description": "# Provided 'as is'\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\n# User guide\n\n[https://d.dam.sap.com/a/L1SUAhp/SAP%20SAC%20Activities%20Log%20Sample%20Scripts%20User%20Guide.pdf?rc=10](https://d.dam.sap.com/a/L1SUAhp/SAP%20SAC%20Activities%20Log%20Sample%20Scripts%20User%20Guide.pdf?rc=10)\n\n# Blog (for Q&A)\n\n[https://blogs.sap.com/2023/01/18/sap-analytics-cloud-activities-log-command-line-interface-cli-to-automate-downloads-associated-best-practices/](https://blogs.sap.com/2023/01/18/sap-analytics-cloud-activities-log-command-line-interface-cli-to-automate-downloads-associated-best-practices/)\n\n# About\n\nScript version 0.8.1\n\nSample scripts created by Matthew Shaw, SAP. [https://people.sap.com/matthew.shaw/#content:blogposts](https://people.sap.com/matthew.shaw/#content:blogposts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31429660",
		"_collection_link": "https://sap-se.postman.co/workspace/SAP-Analytics-Cloud~8ac5e5ee-c61c-4eda-99cb-9af804973bee/collection/31429660-fba17c0b-916b-49da-ab42-ac40604e07ba?action=share&source=collection_link&creator=31429660"
	},
	"item": [
		{
			"name": "GET accesstoken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info(pm.info.requestName+' '+pm.info.eventName+': Getting access token');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else  // we are on a Cloud Foundary Platform\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"};\r",
							"\r",
							"// on the NEO platform a 200 response code is returned even when you are not authorised and the accesstoken is empty.\r",
							"// on th CF platform, we would observe a 401. It means the accesstoken, when on NEO, must be something\r",
							"// otherwise these sample scripts won't work as they should. \r",
							"// if you are using NEO and your accesstoken is empty you'll need to either set your accesstoken to 'something' or uncomment the following line to do this programatically\r",
							"//     if (pm.variables.get(\"accesstoken\")==='') {pm.variables.set(\"accesstoken\",\"invalidaccesstoken\")};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"if (pm.response.code === 200)\r",
							"    {\r",
							"        const jsonData = JSON.parse(responseBody);\r",
							"        pm.environment.set(\"accesstoken\", jsonData.access_token);  // setting the accesstoken so its re-used for all subsequent requests\r",
							"        pm.environment.set(\"x-csrf-token\", \"fetch\");               // we will need to request a new csrf-token as we have a new session\r",
							"        pm.execution.setNextRequest();                                  // we will now get a new x-csrf-token\r",
							"    }\r",
							"else if (pm.response.code === 401)\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid username or password: '+ responseBody);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    }\r",
							"else\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Response Body: '+ responseBody);\r",
							"        if (pm.variables.get(\"recovery\") === pm.info.requestName)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Already attempted to get a valid request. Will now quit');\r",
							"            pm.execution.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Will make one more attempt to get a new accesstoken');\r",
							"            pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        ; //end if \r",
							"    }\r",
							"; // end if\r",
							"\r",
							"const errors=pm.variables.get(\"ContinuousErrors\");\r",
							"const maxerrors=parseInt( (pm.environment.get(\"abort_after_continous_errors_reaches\")!=undefined) ? parseInt(pm.environment.get(\"abort_after_continous_errors_reaches\")) : 3 );  // maxerrors needs to be at least 2, otherwise valid workflows may be able to correctly recover from an invalid access tokens or invalid csrf-tokens\r",
							"\r",
							"if (errors >= maxerrors)\r",
							"{\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting');\r",
							"    pm.variables.set(\"ContinuousErrors\",0); \r",
							"    pm.execution.setNextRequest(null);\r",
							"}\r",
							"else if (errors >= 2)\r",
							"{\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected');\r",
							"    // a valid accesstoken may have been obtained, but the request where it came from could have failed, hence the need to trap for a continous loop of errors here\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{Username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{SACtokenFQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{SACtokenFQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FETCH csrf token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.info(pm.info.requestName+' '+pm.info.eventName+': Fetching a new x-csrf-token');\r",
							"pm.environment.set(\"x-csrf-token\", \"fetch\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Fetch x-csrf-token\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,429]);\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken or the csrf-token must be invalid. We shall get new ones of each!\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': Fetching a new access token');\r",
							"        pm.execution.setNextRequest(\"GET accesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"        break;\r",
							"    } // end if response is 401\r",
							"\r",
							"    case 429:\r",
							"    {\r",
							"        const retryafter=(pm.response.headers.get('Retry-After')!=undefined) ? parseInt(pm.response.headers.get('Retry-After')) : 5000;\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': SAP Analytics Cloud is receiving too many requests. Retrying in '+retryafter+'ms');\r",
							"        setTimeout(()=> {},retryafter);\r",
							"        pm.execution.setNextRequest(pm.info.requestName);\r",
							"        break;\r",
							"    }\r",
							"    \r",
							"    case 200:\r",
							"    {\r",
							"        //console.info(pm.info.requestName+' '+pm.info.eventName+': Fetched a new x-csrf-token');\r",
							"        // errors must not be reset as the next call to UPDATE team must re-submit the request, leaving 'errors' unchanged will ensure that the call is repeated\r",
							"        pm.environment.set(\"x-csrf-token\",pm.response.headers.get(\"x-csrf-token\"));\r",
							"        pm.execution.setNextRequest(pm.variables.get(\"recovery\"));\r",
							"        break;\r",
							"    }\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"        // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=parseInt( (pm.environment.get(\"abort_after_continous_errors_reaches\")!=undefined) ? parseInt(pm.environment.get(\"abort_after_continous_errors_reaches\")) : 3 );  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            pm.execution.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        };\r",
							"    } // end switch pm.response.code\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "{{x-csrf-token}}",
						"type": "text"
					},
					{
						"key": "x-sap-sac-custom-auth",
						"value": "true",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/csrf",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"csrf"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Activities Log",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let pageIndex=pm.variables.get(\"pageIndex\");\r",
							"let total_pages=pm.variables.get(\"total_pages\");\r",
							"\r",
							"if ( (pageIndex===undefined) || (total_pages===undefined))\r",
							"{\r",
							"    pageIndex=1;\r",
							"    pm.variables.set(\"pageIndex\",pageIndex);\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Downloading activities page '+pageIndex);\r",
							"}\r",
							"else\r",
							"{\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Downloading activities page '+pageIndex+' of '+total_pages);\r",
							"}\r",
							"\r",
							"\r",
							"// we set the filter is we are passed a date via the variable. The date will need to be in the format YYYYMMDDHHMMSS or can be just YYYYMMDD\r",
							"// for example 19991231 for 31st Dec 1999\r",
							"let filter_from = pm.variables.get(\"filter_from\");\r",
							"if (filter_from)\r",
							"{\r",
							"    pm.variables.set(\"body\",\"{\\\"from\\\":\\\"\" +filter_from+ \"\\\"}\");\r",
							"}\r",
							"else\r",
							"{\r",
							"    pm.variables.set(\"body\",'');\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Download activities\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403, 429, 500])\r",
							"}\r",
							");\r",
							"\r",
							"switch (pm.response.code) {\r",
							"    case 401:\r",
							"    case 403:\r",
							"        {\r",
							"            // we are not authorised, so our accesstoken or the csrf-token must be invalid. We shall get new ones of each!\r",
							"            // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"            // so we don't end up in an endless loop.\r",
							"            let errors = pm.variables.get(\"ContinuousErrors\");\r",
							"            if (!errors) { errors = 0 };  // in case errors has not yet been set we need to set it to 0\r",
							"            errors++;\r",
							"            pm.variables.set(\"ContinuousErrors\", errors);\r",
							"            console.info(pm.info.requestName + ' ' + pm.info.eventName + ': Fetching new tokens: accesstoken & x-csrf-token');\r",
							"            pm.execution.setNextRequest(\"GET accesstoken\");\r",
							"            pm.variables.set(\"recovery\", pm.info.requestName);\r",
							"            break;\r",
							"        } // end case 401 \r",
							"\r",
							"    case 429:\r",
							"        // in the event SAP Analytics Cloud is receiving too many requests, a HTTP response 429 will be issued.\r",
							"        // in such a case, we shall wait for the 'Retry-After' value and simply re-attempt the same request.\r",
							"        {\r",
							"            const retryafter = pm.response.headers.get('Retry-After') ? parseInt(pm.response.headers.get('Retry-After')) : 5000;\r",
							"            console.info(pm.info.requestName + ' ' + pm.info.eventName + ': SAP Analytics Cloud is receiving too many requests. Retrying in ' + retryafter + 'ms');\r",
							"            setTimeout(() => { }, retryafter);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"            break;\r",
							"        }  // end case 429\r",
							"\r",
							"    case 200:\r",
							"        {\r",
							"            // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"            pm.variables.set(\"ContinuousErrors\", 0);\r",
							"            const total_pages = pm.response.headers.get('epm-page-count'); // the total number of pages there are for this query\r",
							"            let pageIndex = pm.variables.get(\"pageIndex\");  // the pageIndex that was last read\r",
							"\r",
							"            if (pageIndex < total_pages)  // decide if we've read all the pages possible \r",
							"            {\r",
							"                // we need to read more pages to get all the data back. So we repeat this request, just with the next pageIndex increased by 1\r",
							"                pageIndex++;\r",
							"                pm.variables.set(\"pageIndex\", pageIndex);\r",
							"                pm.variables.set(\"total_pages\", total_pages);\r",
							"                pm.execution.setNextRequest(pm.info.requestName);\r",
							"            }\r",
							"            else {\r",
							"                // we've read all the pages\r",
							"                pm.variables.unset(\"pageIndex\");\r",
							"                pm.variables.unset(\"total_pages\");\r",
							"                pm.execution.setNextRequest(null);\r",
							"            }\r",
							"            break;\r",
							"        }  // end case 200\r",
							"\r",
							"    default: // response code is unexpected\r",
							"        {\r",
							"            // we got an unexpected response from the SAC API\r",
							"            let errors = pm.variables.get(\"ContinuousErrors\");\r",
							"            if (!errors) { errors = 0 };  // in case errors has not yet been set we need to set it to 0\r",
							"            errors++;\r",
							"            pm.variables.set(\"ContinuousErrors\", errors);\r",
							"            const maxerrors = 3;  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"            if (errors >= maxerrors) {\r",
							"                console.error(pm.info.requestName + ' ' + pm.info.eventName + ': Too many continuous errors. Aborting. Response: Code '+pm.response.code+' ' + responseBody);\r",
							"                pm.variables.set(\"ContinuousErrors\", 0);\r",
							"                pm.execution.setNextRequest(null);\r",
							"            }\r",
							"            else if (errors >= 2) {\r",
							"                console.warn(pm.info.requestName + ' ' + pm.info.eventName + ': Continuous errors detected. Response: Code '+pm.response.code+' ' + responseBody);\r",
							"                pm.execution.setNextRequest(pm.info.requestName);\r",
							"            }\r",
							"            else {\r",
							"                console.warn(pm.info.requestName + ' ' + pm.info.eventName + ': Unexpected error. Response: Code '+pm.response.code+' ' + responseBody);\r",
							"                pm.execution.setNextRequest(pm.info.requestName);\r",
							"            };\r",
							"            if ( (errors<maxerrors ) && (pm.response.code===500) )\r",
							"            {\r",
							"                console.warn(pm.info.requestName + ' ' + pm.info.eventName + ': Unexpected API response. Waiting 30 seconds to allow the API to self-heal');\r",
							"                setTimeout(()=> {},30000);\r",
							"            }\r",
							"        }\r",
							"        ;\r",
							"}; // end switch pm.response.code"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					},
					{
						"key": "x-csrf-token",
						"value": "{{x-csrf-token}}",
						"type": "text"
					},
					{
						"key": "x-sap-sac-custom-auth",
						"value": "true",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}"
				},
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/audit/activities/exportActivities?pageIndex={{pageIndex}}&sortKey=Timestamp&sortDescending=false",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"audit",
						"activities",
						"exportActivities"
					],
					"query": [
						{
							"key": "pageSize",
							"value": "100000",
							"description": "If enabled it limits the number of records (rows) returned in each page. Set this to 100000 and its best not to adjust this setting unless you get errors that could mean the volume of data is too large for the API to handle",
							"disabled": true
						},
						{
							"key": "pageIndex",
							"value": "{{pageIndex}}"
						},
						{
							"key": "sortKey",
							"value": "Timestamp"
						},
						{
							"key": "sortDescending",
							"value": "false"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}