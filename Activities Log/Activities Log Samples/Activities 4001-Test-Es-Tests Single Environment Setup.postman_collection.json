{
	"info": {
		"_postman_id": "424d1741-6859-4dce-bdca-07d48fbd636d",
		"name": "Activities 4001-Test-Es-Tests Single Environment Setup",
		"description": "# Provided 'as is'\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\n# User guide\n\n[https://d.dam.sap.com/a/L1SUAhp/SAP%20SAC%20Activities%20Log%20Sample%20Scripts%20User%20Guide.pdf?rc=10](https://d.dam.sap.com/a/L1SUAhp/SAP%20SAC%20Activities%20Log%20Sample%20Scripts%20User%20Guide.pdf?rc=10)\n\n# Blog (for Q&A)\n\n[https://blogs.sap.com/2023/01/18/sap-analytics-cloud-activities-log-command-line-interface-cli-to-automate-downloads-associated-best-practices/](https://blogs.sap.com/2023/01/18/sap-analytics-cloud-activities-log-command-line-interface-cli-to-automate-downloads-associated-best-practices/)\n\n# About\n\nScript version 0.8\n\nSample scripts created by Matthew Shaw, SAP. [https://people.sap.com/matthew.shaw/#content:blogposts](https://people.sap.com/matthew.shaw/#content:blogposts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31429660",
		"_collection_link": "https://sap-se.postman.co/workspace/SAP-Analytics-Cloud~8ac5e5ee-c61c-4eda-99cb-9af804973bee/collection/31429660-424d1741-6859-4dce-bdca-07d48fbd636d?action=share&source=collection_link&creator=31429660"
	},
	"item": [
		{
			"name": "GET accesstoken (Step 1 - obtain a valid token)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Getting an access token using the SACtokenFQND as part of the access token URL');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else if (SAC_platform==='CF') // we are on a Cloud Foundary Platform\r",
							"{\r",
							"   pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"}\r",
							"else\r",
							"{\r",
							"    console.warn(pm.info.requestName+' '+pm.info.eventName+': Invalid SACplatform setting, assuming CF. Supported values: NEO, CF. SACplatform: '+ SAC_platform);\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"}\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACserviceFQDN : '+pm.variables.get(\"SACserviceFQDN\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACtokenFQDN   : '+pm.variables.get(\"SACtokenFQDN\"));\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACplatform    : '+pm.variables.get(\"SACplatform\"));\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Username       : '+pm.variables.get(\"Username\"));\r",
							"\r",
							"// on the NEO platform a 200 response code is returned even when you are not authorised and the accesstoken is empty.\r",
							"// on th CF platform, we would observe a 401. It means the accesstoken, when on NEO, must be something\r",
							"// otherwise these sample scripts won't work as they should. \r",
							"// if you are using NEO and your accesstoken is empty you'll need to either set your accesstoken to 'something' or uncomment the following line to do this programatically\r",
							"//     if (pm.variables.get(\"accesstoken\")==='') {pm.variables.set(\"accesstoken\",\"invalidaccesstoken\")};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"if (pm.response.code === 200)\r",
							"    {\r",
							"        const jsonData = JSON.parse(responseBody);\r",
							"        pm.environment.set(\"accesstoken\", jsonData.access_token);  // setting the accesstoken so its re-used for all subsequent requests\r",
							"        pm.environment.set(\"x-csrf-token\", \"fetch\");               // we will need to request a new csrf-token as we have a new session\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': Great! A valid accesstoken was obtained. This means your SACtokenFQDN, SACplatform, Username and Password are all valid. You can now test the Activities endpoint. The accesstoken provided was '+jsonData.access_token+' and will be re-presented in the header of subsequent requests');\r",
							"        pm.execution.setNextRequest();                                  // let the next request run (if being run in the runner)\r",
							"    }\r",
							"else if (pm.response.code === 401)\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid username or password: '+ responseBody);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    }\r",
							"else\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Check your SACtokenFQDN is set correctly. Response Body: '+ responseBody);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    }\r",
							"; // end if"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{Username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{SACtokenFQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{SACtokenFQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "READ oldest log entry (Step 2 - read Activities endpoint)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Single Environment Setup OK\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    }\r",
							");\r",
							"\r",
							"if ( (pm.response.code === 200) )\r",
							"{\r",
							"        // we are authorised and the csrf-tokem is also valid. We need to set the x-csrf-token so the call is quicker.\r",
							"        // Performing a 'fetch' of the x-csrf-token makes the call longer and its unnecessary. Setting the x-csrf-token to a valid value\r",
							"        // will speed things up by a small fraction (which can be a lot of time if making thousands of calls!)\r",
							"        const csrftoken=pm.environment.get(\"x-csrf-token\");\r",
							"        if (csrftoken===\"fetch\")\r",
							"        {\r",
							"            pm.environment.set(\"x-csrf-token\",pm.response.headers.get(\"x-csrf-token\"));\r",
							"        }\r",
							"};\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': This session is not authorised, likely due to an invalid access token. Response Body: '+ responseBody);\r",
							"        break;\r",
							"    }\r",
							"    case 200:\r",
							"    {\r",
							"        const lines         = responseBody.split('\\n');  // lines is an array, each element is a row\r",
							"        lines.splice(0,4);         // lines has the first 5 lins removed from it, as this is the header\r",
							"        const total_entries = pm.response.headers.get('epm-page-count'); // the total number of pages there are for this query. Given our pageSize is just 1, this is the numnber of pages, but also then the number of entires in total\r",
							"        \r",
							"        let columns_array = lines[0].split('\",\"');          // split each row into columns\r",
							"        while (columns_array.length<8)\r",
							"        {\r",
							"            // we have fewer columns than we expect. It means the description column has carriage returns in it and we need to 'shift' the rows below up, and join it to this row, minus the carriage returns\r",
							"            lines[0]=lines[0].concat(\" \",lines[1]);\r",
							"            lines.splice(1,1); // remove the 2nd line (index 1)\r",
							"            columns_array = lines[line].split('\",\"');  \r",
							"        }\r",
							"\r",
							"        let oldest_date_GMT = columns_array[7] // get the timestamp from row 1 (index0) in the 8th column (index7)\r",
							"        let oldestdate_this_time_zone= new Date(oldest_date_GMT);\r",
							"        \r",
							"        let timezone_hours   = parseInt(pm.variables.get(\"TimeZoneHours\"));\r",
							"        let timezone_minutes = parseInt(pm.variables.get(\"TimeZoneMinutes\"));\r",
							"        if ((timezone_hours   === undefined)|| (!Number.isInteger(timezone_hours  )))  { timezone_hours   = - Math.floor((new Date().getTimezoneOffset())/60) };\r",
							"        if ((timezone_minutes === undefined)|| (!Number.isInteger(timezone_minutes)))  { timezone_minutes = -            (new Date().getTimezoneOffset())%60  };\r",
							"\r",
							"        oldestdate_this_time_zone.setHours(oldestdate_this_time_zone.getHours()     + timezone_hours);    // we add (or substract) the hours depending upon the timezone\r",
							"        oldestdate_this_time_zone.setMinutes(oldestdate_this_time_zone.getMinutes() + timezone_minutes + oldestdate_this_time_zone.getTimezoneOffset()  );  // we add (or substract) the minutes depending upon the timezone\r",
							"        let number_of_days = Math.round( ((new Date()-oldestdate_this_time_zone)) / (1000 * 3600 * 24) ) \r",
							"\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': Great! A valid response was obtained and means your SACserviceFQDN is set correctly.');\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': This SAP Analytics Cloud Service has '+total_entries+' activity logs');\r",
							"        console.info(pm.info.requestName+' '+pm.info.eventName+': The oldest log entry found was for '+oldestdate_this_time_zone+' which was '+number_of_days+' days ago');\r",
							"\r",
							"        break;\r",
							"    }\r",
							"    default:\r",
							"    {\r",
							"        // we got an unexpected response from the SAC API\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response Body: '+ responseBody);\r",
							"    }\r",
							"    \r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading Activities API endpoint to obtain the oldest entry. This will validate if the Activities endpoint is valid or not');\r",
							"\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACserviceFQDN : '+pm.variables.get(\"SACserviceFQDN\"));\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACtokenFQDN   : '+pm.variables.get(\"SACtokenFQDN\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': SACplatform    : '+pm.variables.get(\"SACplatform\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Username       : '+pm.variables.get(\"Username\")+' (not used in this request)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': accesstoken    : '+pm.variables.get(\"accesstoken\")+' (obtained from the token URL endpoint and re-presented to this endpoint)');\r",
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Now making a request to the Activities endpoint...');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "{{x-csrf-token}}",
						"type": "text"
					},
					{
						"key": "x-sap-sac-custom-auth",
						"value": "true",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/audit/activities/exportActivities?pageSize=1&pageIndex=1&sortKey=Timestamp&sortDescending=false",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"audit",
						"activities",
						"exportActivities"
					],
					"query": [
						{
							"key": "pageSize",
							"value": "1"
						},
						{
							"key": "pageIndex",
							"value": "1"
						},
						{
							"key": "sortKey",
							"value": "Timestamp"
						},
						{
							"key": "sortDescending",
							"value": "false"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}