{
	"info": {
		"_postman_id": "7cab45c4-1392-4c47-81f5-b195149f12c1",
		"name": "Export Data 870-Fcj-Audit Data (3-legged OAuth)",
		"description": "# Provided 'as is'\n\nThese samples are being provided \"AS IS\", without any warranty obligations whatsoever on the part of SAP. SAP makes no express or implied warranties of any type, including, but not limited to, implied warranties of merchantability and of fitness for a particular purpose.\n\n# User guide\n\n[https://d.dam.sap.com/a/A69ssVS](https://d.dam.sap.com/a/A69ssVS)\n\n# Blog (for Q&A)\n\n[https://blogs.sap.com/2022/05/04/sap-analytics-cloud-export-data-api-sample-scripts/](https://blogs.sap.com/2022/05/04/sap-analytics-cloud-export-data-api-sample-scripts/)\n\n# About\n\nScript version 0.7\n\nSample scripts created by Matthew Shaw, SAP. [https://people.sap.com/matthew.shaw/#content:blogposts](https://people.sap.com/matthew.shaw/#content:blogposts)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31429660",
		"_collection_link": "https://sap-se.postman.co/workspace/SAP-Analytics-Cloud~8ac5e5ee-c61c-4eda-99cb-9af804973bee/collection/31429660-7cab45c4-1392-4c47-81f5-b195149f12c1?action=share&source=collection_link&creator=31429660"
	},
	"item": [
		{
			"name": "READ Audit Data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading Audit Data');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"\r",
							"// we have a variable called 'nextlink'. This variable contains the URL parameters for the next page of results, should the last page contains a 'next link'\r",
							"// a 'next link' will be included in the responseBody of the request when there are more results to be returned in other pages.\r",
							"// you can optionally set the page size in the params with parameter pageszie if you would like to control the number of results per page\r",
							"if (pm.variables.get(\"nextlink\"))\r",
							"{\r",
							"    pm.request.url.query.add(pm.variables.get(\"nextlink\"))\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"READ Audit Data\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Your access token is no longer valid. Please get a new access token');\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"    const totalresultcountacrossallpages=readbody['@odata.count'];\r",
							"    if (totalresultcountacrossallpages!==undefined)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Entities across all pages (odata count): '+totalresultcountacrossallpages);\r",
							"    };\r",
							"    \r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Entities in Page: '+readbody['@des.entitiesInPage']);\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Processing Time : '+readbody['@des.processingTimeInMilliseconds']+' ms');\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Audit Data Response Body = ',responseBody);\r",
							"  \r",
							"    \r",
							"    const nextlink=readbody['@odata.nextLink'];\r",
							"    //console.log(pm.info.requestName+' '+pm.info.eventName+': Next Link       : '+nextlink);\r",
							"    // we need to see if the responseBody contains a 'nextlink'.\r",
							"    // if a 'nextlink' is found then we must repeat this call, and include that nextlink parameters\r",
							"    // if no nextlink is found, we should stop as all results have been returned\r",
							"    if (nextlink===undefined)\r",
							"    {\r",
							"        pm.variables.unset(\"nextlink\");\r",
							"        pm.execution.setNextRequest(null);\r",
							"    }\r",
							"    else\r",
							"    { \r",
							"        pm.variables.set(\"nextlink\",nextlink.substr(nextlink.search(\"\\\\?\")+1));\r",
							"        pm.execution.setNextRequest(pm.info.requestName);\r",
							"    };\r",
							"    \r",
							"    break;\r",
							"\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=parseInt( (pm.environment.get(\"abort_after_continous_errors_reaches\")!=undefined) ? parseInt(pm.environment.get(\"abort_after_continous_errors_reaches\")) : 3 );  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            pm.execution.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "clientSecret",
							"value": "{{Password}}",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "{{Username}}",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://{{SACtokenFQDN}}/oauth/authorize",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://{{SACtokenFQDN}}/oauth/token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "accesstoken",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/dataexport/providers/{{ExportData_NamespaceID}}/{{file_ProviderID}}/AuditData",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"dataexport",
						"providers",
						"{{ExportData_NamespaceID}}",
						"{{file_ProviderID}}",
						"AuditData"
					],
					"query": [
						{
							"key": "pagesize",
							"value": "1000",
							"disabled": true
						},
						{
							"key": "$count",
							"value": "true",
							"disabled": true
						},
						{
							"key": "$top",
							"value": "5",
							"disabled": true
						},
						{
							"key": "Cache-Control",
							"value": "no-cache",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}