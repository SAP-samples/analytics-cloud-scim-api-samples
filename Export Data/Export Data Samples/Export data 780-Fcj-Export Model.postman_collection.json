{
	"info": {
		"_postman_id": "8f284e90-c4fc-443e-9806-632c57e1afb1",
		"name": "Export data 780-Fcj-Export Model",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31429660",
		"_collection_link": "https://sap-se.postman.co/workspace/SAP-Analytics-Cloud~8ac5e5ee-c61c-4eda-99cb-9af804973bee/collection/31429660-8f284e90-c4fc-443e-9806-632c57e1afb1?action=share&source=collection_link&creator=31429660"
	},
	"item": [
		{
			"name": "READ Fact Data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading Fact Data');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"\r",
							"\r",
							"// we have a variable called 'nextlink'. This variable contains the URL parameters for the next page of results, should the last page contains a 'next link'\r",
							"// a 'next link' will be included in the responseBody of the request when there are more results to be returned in other pages.\r",
							"// you can optionally set the page size in the params with parameter pageszie if you would like to control the number of results per page\r",
							"if (pm.variables.get(\"nextlink\"))\r",
							"{\r",
							"    pm.request.url.query.add(pm.variables.get(\"nextlink\"))\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"READ Fact Data\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new access token');\r",
							"        pm.execution.setNextRequest(\"GET accesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"\r",
							"    const totalresultcountacrossallpages=readbody['@odata.count'];\r",
							"    if (totalresultcountacrossallpages!==undefined)\r",
							"    {\r",
							"        // if $count in the request params to set to true, then a @odata.count will be returned in each page of the results and we can display it here\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Entities across all pages (odata count): '+totalresultcountacrossallpages);\r",
							"    };\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Entities in Page: '+readbody['@des.entitiesInPage']);\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Processing Time : '+readbody['@des.processingTimeInMilliseconds']+' ms');  // this is the processing time on the SAP Analytics Cloud backend to get and prepare the data\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Fact Data Response Body = ',readbody.value);\r",
							"  \r",
							"    const nextlink=readbody['@odata.nextLink'];\r",
							"    //console.log(pm.info.requestName+' '+pm.info.eventName+': Next Link       : '+nextlink);\r",
							"    // we need to see if the responseBody contains a 'nextlink'.\r",
							"    // if a 'nextlink' is found then we must repeat this call, and include that nextlink parameters\r",
							"    // if no nextlink is found, we should stop as all results have been returned\r",
							"    if (nextlink===undefined)\r",
							"    {\r",
							"        pm.variables.unset(\"nextlink\");\r",
							"        pm.execution.setNextRequest();   // this means Postman will continue to the next request. If it was setNextRequest(null), then Postman would quit this iteration and move to the next value in the data file, if there is one.\r",
							"    }\r",
							"    else\r",
							"    { \r",
							"        pm.variables.set(\"nextlink\",nextlink.substr(nextlink.search(\"\\\\?\")+1));\r",
							"        pm.execution.setNextRequest(pm.info.requestName);\r",
							"    };\r",
							"\r",
							"    \r",
							"    break;\r",
							"\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=parseInt( (pm.environment.get(\"abort_after_continous_errors_reaches\")!=undefined) ? parseInt(pm.environment.get(\"abort_after_continous_errors_reaches\")) : 3 );  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            pm.execution.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/dataexport/providers/{{ExportData_NamespaceID}}/{{file_ProviderID}}/FactData?$count=true",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"dataexport",
						"providers",
						"{{ExportData_NamespaceID}}",
						"{{file_ProviderID}}",
						"FactData"
					],
					"query": [
						{
							"key": "pagesize",
							"value": "50000",
							"description": "If enabled it limits the number of records (rows) returned in each page. Automatic paging is always enabled which ensures the response is always less than 20Mb. You can, though, further limit the number rows if you wish to do so.",
							"disabled": true
						},
						{
							"key": "$select",
							"value": "keycolumn1,keycolumn2,keycolumn3",
							"description": "Contains all key columns you would like to be returned. You can get the key columns from the provider metadata endpoint. If unspecifed, then all key columns are returned",
							"disabled": true
						},
						{
							"key": "$top",
							"value": "5",
							"description": "Returns top N values.\n\n",
							"disabled": true
						},
						{
							"key": "$count",
							"value": "true",
							"description": "if enabled, each response contains the @odata.count property which holds the total number of rows, even though each 'page' will be limited to the number of rows such that the data is less than 20Mb."
						},
						{
							"key": "Cache-Control",
							"value": "no-cache",
							"description": "if enabled, the data is 'fetched' again from the model which has a performance impact, but it dies mean any changes made will be reflected\n",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "READ Dimension Master Data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Reading Dimension Master Data');\r",
							"pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"\r",
							"// we have a variable called 'nextlink'. This variable contains the URL parameters for the next page of results, should the last page contains a 'next link'\r",
							"// a 'next link' will be included in the responseBody of the request when there are more results to be returned in other pages.\r",
							"// you can optionally set the page size in the params with parameter pageszie if you would like to control the number of results per page\r",
							"if (pm.variables.get(\"nextlink\"))\r",
							"{\r",
							"    pm.request.url.query.add(pm.variables.get(\"nextlink\"))\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"READ Dimension Master Data\", function ()\r",
							"    {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200,401,403]);\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							"switch (pm.response.code)\r",
							"{\r",
							"    case 401:\r",
							"    case 403:\r",
							"    {\r",
							"        // we are not authorised, so our accesstoken  must be invalid. We shall get a new one\r",
							"        // A 401 error might be because something is wrong with the call or even the SAP SAC SCIM API, so we need to start counting errors,\r",
							"        // so we don't end up in an endless loop.\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Fetching a new access token');\r",
							"        pm.execution.setNextRequest(\"GET accesstoken\"); // once a new accesstoken is successfully returned this call will be repeated thanks to the 'recovery' variable set in the pre-request\r",
							"       break;\r",
							"    } // end if response is 401 or 403\r",
							"\r",
							"    case 200:\r",
							"    {\r",
							"    pm.variables.set(\"ContinuousErrors\",0);\r",
							"    // Need to set the ContinuousErrors count to 0 as we got a valid response from the API\r",
							"    pm.variables.set(\"NeedGetToBeAuthorised\",false);\r",
							"    \r",
							"    const readbody    = JSON.parse(responseBody);\r",
							"    const totalresultcountacrossallpages=readbody['@odata.count'];\r",
							"    if (totalresultcountacrossallpages!==undefined)\r",
							"    {\r",
							"        console.log(pm.info.requestName+' '+pm.info.eventName+': Entities across all pages (odata count): '+totalresultcountacrossallpages);\r",
							"    };\r",
							"\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Entities in Page: '+readbody['@des.entitiesInPage']);\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Processing Time : '+readbody['@des.processingTimeInMilliseconds']+' ms');\r",
							"    console.log(pm.info.requestName+' '+pm.info.eventName+': Dimension Master Data Response Body = ',responseBody);\r",
							"  \r",
							"\r",
							"    function myfunction_Display_Data( entry )\r",
							"    {\r",
							"         console.log('   '+entry.ID+': '+entry.Description);\r",
							"    };\r",
							"\r",
							"\r",
							"    const DimensionMasterData=readbody.value;\r",
							"    console.log('Dimension Master Data Values: ',DimensionMasterData.length);\r",
							"    DimensionMasterData.forEach( myfunction_Display_Data );\r",
							"\r",
							"    \r",
							"    const nextlink=readbody['@odata.nextLink'];\r",
							"    //console.log(pm.info.requestName+' '+pm.info.eventName+': Next Link       : '+nextlink);\r",
							"    // we need to see if the responseBody contains a 'nextlink'.\r",
							"    // if a 'nextlink' is found then we must repeat this call, and include that nextlink parameters\r",
							"    // if no nextlink is found, we should stop as all results have been returned\r",
							"    if (nextlink===undefined)\r",
							"    {\r",
							"        pm.variables.unset(\"nextlink\");\r",
							"        pm.execution.setNextRequest(null);  // Postman will quit this iteration and move to the next value in the data file, if there is one.\r",
							"    }\r",
							"    else\r",
							"    { \r",
							"        pm.variables.set(\"nextlink\",nextlink.substr(nextlink.search(\"\\\\?\")+1));\r",
							"        pm.execution.setNextRequest(pm.info.requestName);\r",
							"    };\r",
							"    \r",
							"    break;\r",
							"\r",
							"    }\r",
							"\r",
							"    default: // response code is unexpected\r",
							"    {\r",
							"       // we got an unexpected response from the SAC API\r",
							"        let errors=pm.variables.get(\"ContinuousErrors\");\r",
							"        if (!errors) { errors=0 };  // in case errors has not yet been set we need to set it to 0\r",
							"        errors++;\r",
							"        pm.variables.set(\"ContinuousErrors\",errors);\r",
							"        const maxerrors=parseInt( (pm.environment.get(\"abort_after_continous_errors_reaches\")!=undefined) ? parseInt(pm.environment.get(\"abort_after_continous_errors_reaches\")) : 3 );  // maxerrors should be at least 2 to allow for recovery of invalid access token and csrf tokens\r",
							"                            // it means a setting of 1 would mean any call following would not be allowed to re-attempt the call.\r",
							"                            // a setting of 3 is recommended to allow at least 1 re-attempted call and any subsequent call also failing for a potentially different reason\r",
							"\r",
							"        if (errors >= maxerrors)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting. Response: '+ responseBody);\r",
							"            pm.variables.set(\"ContinuousErrors\",0); \r",
							"            pm.execution.setNextRequest(null);\r",
							"        }\r",
							"        else if (errors >= 2)\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected. Response: '+ responseBody);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Unexpected error. Response: '+ responseBody);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        break;\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{SACserviceFQDN}}/api/v1/dataexport/providers/{{ExportData_NamespaceID}}/{{file_ProviderID}}/{{file_DimensionName}}Master?$count=true",
					"protocol": "https",
					"host": [
						"{{SACserviceFQDN}}"
					],
					"path": [
						"api",
						"v1",
						"dataexport",
						"providers",
						"{{ExportData_NamespaceID}}",
						"{{file_ProviderID}}",
						"{{file_DimensionName}}Master"
					],
					"query": [
						{
							"key": "pagesize",
							"value": "10000",
							"description": "If enabled it limits the number of records (rows) returned in each page. Automatic paging is always enabled which ensures the response is always less than 20Mb. You can, though, further limit the number rows if you wish to do so.",
							"disabled": true
						},
						{
							"key": "$count",
							"value": "true",
							"description": "if enabled, each response contains the @odata.count property which holds the total number of rows, even though each 'page' will be limited to the number of rows such that the data is less than 20Mb."
						},
						{
							"key": "$top",
							"value": "5",
							"description": "Returns top N values.",
							"disabled": true
						},
						{
							"key": "Cache-Control",
							"value": "no-cache",
							"description": "if enabled, the data is 'fetched' again from the model which has a performance impact, but it dies mean any changes made will be reflected\n",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET accesstoken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.info.requestName+' '+pm.info.eventName+': Getting access token');\r",
							"const SAC_platform = pm.variables.get(\"SACplatform\");\r",
							"if (SAC_platform==='NEO')\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth2/api/v1/\");\r",
							"}\r",
							"else  // we are on a Cloud Foundary Platform\r",
							"{\r",
							"    pm.variables.set(\"oauthpath\",\"/oauth/\");\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET accesstoken\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"    }\r",
							");\r",
							"\r",
							"if (pm.response.code === 200)\r",
							"    {\r",
							"        const jsonData = JSON.parse(responseBody);\r",
							"        pm.environment.set(\"accesstoken\", jsonData.access_token);  // setting the accesstoken so its re-used for all subsequent requests\r",
							"        pm.environment.set(\"x-csrf-token\", \"fetch\");               // we will need to request a new csrf-token as we have a new session\r",
							"        pm.execution.setNextRequest(pm.variables.get(\"recovery\"));      // we will now return to the request that sent us here in the first place\r",
							"    }\r",
							"else if (pm.response.code === 401)\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Invalid username or password: '+ responseBody);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    }\r",
							"else\r",
							"    {\r",
							"        console.error(pm.info.requestName+' '+pm.info.eventName+': Unhandled error. Response Body: '+ responseBody);\r",
							"        if (pm.variables.get(\"recovery\") === pm.info.requestName)\r",
							"        {\r",
							"            console.error(pm.info.requestName+' '+pm.info.eventName+': Already attempted to get a valid request. Will now quit');\r",
							"            pm.execution.setNextRequest(null);\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.warn(pm.info.requestName+' '+pm.info.eventName+': Will make one more attempt to get a new accesstoken');\r",
							"            pm.variables.set(\"recovery\",pm.info.requestName);\r",
							"            pm.execution.setNextRequest(pm.info.requestName);\r",
							"        }\r",
							"        ; //end if \r",
							"    }\r",
							"; // end if\r",
							"\r",
							"const errors=pm.variables.get(\"ContinuousErrors\");\r",
							"const maxerrors=parseInt( (pm.environment.get(\"abort_after_continous_errors_reaches\")!=undefined) ? parseInt(pm.environment.get(\"abort_after_continous_errors_reaches\")) : 3 );  // maxerrors needs to be at least 2, otherwise valid workflows may be able to correctly recover from an invalid access tokens or invalid csrf-tokens\r",
							"\r",
							"if (errors >= maxerrors)\r",
							"{\r",
							"    console.error(pm.info.requestName+' '+pm.info.eventName+': Too many continuous errors. Aborting');\r",
							"    pm.variables.set(\"ContinuousErrors\",0); \r",
							"    pm.execution.setNextRequest(null);\r",
							"}\r",
							"else if (errors >= 2)\r",
							"{\r",
							"    console.info(pm.info.requestName+' '+pm.info.eventName+': Continuous errors detected');\r",
							"    // a valid accesstoken may have been obtained, but the request where it came from could have failed, hence the need to trap for a continous loop of errors here\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{Username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{SACtokenFQDN}}{{oauthpath}}token?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"{{SACtokenFQDN}}{{oauthpath}}token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		}
	]
}